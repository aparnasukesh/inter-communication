// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	JWT_TokenService_GenerateJWt_FullMethodName = "/auth.JWT_TokenService/GenerateJWt"
	JWT_TokenService_VerifyJWT_FullMethodName   = "/auth.JWT_TokenService/VerifyJWT"
)

// JWT_TokenServiceClient is the client API for JWT_TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JWT_TokenServiceClient interface {
	GenerateJWt(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error)
}

type jWT_TokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJWT_TokenServiceClient(cc grpc.ClientConnInterface) JWT_TokenServiceClient {
	return &jWT_TokenServiceClient{cc}
}

func (c *jWT_TokenServiceClient) GenerateJWt(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, JWT_TokenService_GenerateJWt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWT_TokenServiceClient) VerifyJWT(ctx context.Context, in *VerifyJWTRequest, opts ...grpc.CallOption) (*VerifyJWTResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyJWTResponse)
	err := c.cc.Invoke(ctx, JWT_TokenService_VerifyJWT_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWT_TokenServiceServer is the server API for JWT_TokenService service.
// All implementations must embed UnimplementedJWT_TokenServiceServer
// for forward compatibility
type JWT_TokenServiceServer interface {
	GenerateJWt(context.Context, *GenerateRequest) (*GenerateResponse, error)
	VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error)
	mustEmbedUnimplementedJWT_TokenServiceServer()
}

// UnimplementedJWT_TokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJWT_TokenServiceServer struct {
}

func (UnimplementedJWT_TokenServiceServer) GenerateJWt(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateJWt not implemented")
}
func (UnimplementedJWT_TokenServiceServer) VerifyJWT(context.Context, *VerifyJWTRequest) (*VerifyJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJWT not implemented")
}
func (UnimplementedJWT_TokenServiceServer) mustEmbedUnimplementedJWT_TokenServiceServer() {}

// UnsafeJWT_TokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JWT_TokenServiceServer will
// result in compilation errors.
type UnsafeJWT_TokenServiceServer interface {
	mustEmbedUnimplementedJWT_TokenServiceServer()
}

func RegisterJWT_TokenServiceServer(s grpc.ServiceRegistrar, srv JWT_TokenServiceServer) {
	s.RegisterService(&JWT_TokenService_ServiceDesc, srv)
}

func _JWT_TokenService_GenerateJWt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWT_TokenServiceServer).GenerateJWt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JWT_TokenService_GenerateJWt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWT_TokenServiceServer).GenerateJWt(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_TokenService_VerifyJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWT_TokenServiceServer).VerifyJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JWT_TokenService_VerifyJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWT_TokenServiceServer).VerifyJWT(ctx, req.(*VerifyJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JWT_TokenService_ServiceDesc is the grpc.ServiceDesc for JWT_TokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JWT_TokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.JWT_TokenService",
	HandlerType: (*JWT_TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateJWt",
			Handler:    _JWT_TokenService_GenerateJWt_Handler,
		},
		{
			MethodName: "VerifyJWT",
			Handler:    _JWT_TokenService_VerifyJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

const (
	UserAuthService_UserAuthRequired_FullMethodName = "/auth.UserAuthService/UserAuthRequired"
)

// UserAuthServiceClient is the client API for UserAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAuthServiceClient interface {
	UserAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type userAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAuthServiceClient(cc grpc.ClientConnInterface) UserAuthServiceClient {
	return &userAuthServiceClient{cc}
}

func (c *userAuthServiceClient) UserAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, UserAuthService_UserAuthRequired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAuthServiceServer is the server API for UserAuthService service.
// All implementations must embed UnimplementedUserAuthServiceServer
// for forward compatibility
type UserAuthServiceServer interface {
	UserAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedUserAuthServiceServer()
}

// UnimplementedUserAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAuthServiceServer struct {
}

func (UnimplementedUserAuthServiceServer) UserAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAuthRequired not implemented")
}
func (UnimplementedUserAuthServiceServer) mustEmbedUnimplementedUserAuthServiceServer() {}

// UnsafeUserAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAuthServiceServer will
// result in compilation errors.
type UnsafeUserAuthServiceServer interface {
	mustEmbedUnimplementedUserAuthServiceServer()
}

func RegisterUserAuthServiceServer(s grpc.ServiceRegistrar, srv UserAuthServiceServer) {
	s.RegisterService(&UserAuthService_ServiceDesc, srv)
}

func _UserAuthService_UserAuthRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAuthServiceServer).UserAuthRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAuthService_UserAuthRequired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAuthServiceServer).UserAuthRequired(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAuthService_ServiceDesc is the grpc.ServiceDesc for UserAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.UserAuthService",
	HandlerType: (*UserAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserAuthRequired",
			Handler:    _UserAuthService_UserAuthRequired_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

const (
	AdminAuthService_AdminAuthRequired_FullMethodName = "/auth.AdminAuthService/AdminAuthRequired"
)

// AdminAuthServiceClient is the client API for AdminAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminAuthServiceClient interface {
	AdminAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type adminAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminAuthServiceClient(cc grpc.ClientConnInterface) AdminAuthServiceClient {
	return &adminAuthServiceClient{cc}
}

func (c *adminAuthServiceClient) AdminAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, AdminAuthService_AdminAuthRequired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminAuthServiceServer is the server API for AdminAuthService service.
// All implementations must embed UnimplementedAdminAuthServiceServer
// for forward compatibility
type AdminAuthServiceServer interface {
	AdminAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAdminAuthServiceServer()
}

// UnimplementedAdminAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminAuthServiceServer struct {
}

func (UnimplementedAdminAuthServiceServer) AdminAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminAuthRequired not implemented")
}
func (UnimplementedAdminAuthServiceServer) mustEmbedUnimplementedAdminAuthServiceServer() {}

// UnsafeAdminAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminAuthServiceServer will
// result in compilation errors.
type UnsafeAdminAuthServiceServer interface {
	mustEmbedUnimplementedAdminAuthServiceServer()
}

func RegisterAdminAuthServiceServer(s grpc.ServiceRegistrar, srv AdminAuthServiceServer) {
	s.RegisterService(&AdminAuthService_ServiceDesc, srv)
}

func _AdminAuthService_AdminAuthRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminAuthServiceServer).AdminAuthRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminAuthService_AdminAuthRequired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminAuthServiceServer).AdminAuthRequired(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminAuthService_ServiceDesc is the grpc.ServiceDesc for AdminAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.AdminAuthService",
	HandlerType: (*AdminAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminAuthRequired",
			Handler:    _AdminAuthService_AdminAuthRequired_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

const (
	SuperAdminService_SuperAdminAuthRequired_FullMethodName = "/auth.SuperAdminService/SuperAdminAuthRequired"
)

// SuperAdminServiceClient is the client API for SuperAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperAdminServiceClient interface {
	SuperAdminAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type superAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperAdminServiceClient(cc grpc.ClientConnInterface) SuperAdminServiceClient {
	return &superAdminServiceClient{cc}
}

func (c *superAdminServiceClient) SuperAdminAuthRequired(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_SuperAdminAuthRequired_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperAdminServiceServer is the server API for SuperAdminService service.
// All implementations must embed UnimplementedSuperAdminServiceServer
// for forward compatibility
type SuperAdminServiceServer interface {
	SuperAdminAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedSuperAdminServiceServer()
}

// UnimplementedSuperAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuperAdminServiceServer struct {
}

func (UnimplementedSuperAdminServiceServer) SuperAdminAuthRequired(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperAdminAuthRequired not implemented")
}
func (UnimplementedSuperAdminServiceServer) mustEmbedUnimplementedSuperAdminServiceServer() {}

// UnsafeSuperAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperAdminServiceServer will
// result in compilation errors.
type UnsafeSuperAdminServiceServer interface {
	mustEmbedUnimplementedSuperAdminServiceServer()
}

func RegisterSuperAdminServiceServer(s grpc.ServiceRegistrar, srv SuperAdminServiceServer) {
	s.RegisterService(&SuperAdminService_ServiceDesc, srv)
}

func _SuperAdminService_SuperAdminAuthRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).SuperAdminAuthRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_SuperAdminAuthRequired_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).SuperAdminAuthRequired(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperAdminService_ServiceDesc is the grpc.ServiceDesc for SuperAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SuperAdminService",
	HandlerType: (*SuperAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SuperAdminAuthRequired",
			Handler:    _SuperAdminService_SuperAdminAuthRequired_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v3.12.4
// source: movie_booking/movie_booking.proto

package movie_booking

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Booking related messages
type Booking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId     uint32               `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	UserId        uint32               `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShowtimeId    uint32               `protobuf:"varint,3,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
	BookingDate   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=booking_date,json=bookingDate,proto3" json:"booking_date,omitempty"`
	TotalAmount   float64              `protobuf:"fixed64,5,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	PaymentStatus string               `protobuf:"bytes,6,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	BookingSeats  []*BookingSeat       `protobuf:"bytes,7,rep,name=booking_seats,json=bookingSeats,proto3" json:"booking_seats,omitempty"`
}

func (x *Booking) Reset() {
	*x = Booking{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Booking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Booking) ProtoMessage() {}

func (x *Booking) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Booking.ProtoReflect.Descriptor instead.
func (*Booking) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{0}
}

func (x *Booking) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *Booking) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Booking) GetShowtimeId() uint32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

func (x *Booking) GetBookingDate() *timestamp.Timestamp {
	if x != nil {
		return x.BookingDate
	}
	return nil
}

func (x *Booking) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *Booking) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *Booking) GetBookingSeats() []*BookingSeat {
	if x != nil {
		return x.BookingSeats
	}
	return nil
}

type BookingSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	SeatId    uint32 `protobuf:"varint,2,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`
}

func (x *BookingSeat) Reset() {
	*x = BookingSeat{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BookingSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSeat) ProtoMessage() {}

func (x *BookingSeat) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSeat.ProtoReflect.Descriptor instead.
func (*BookingSeat) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{1}
}

func (x *BookingSeat) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *BookingSeat) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

type CreateBookingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        uint32   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ShowtimeId    uint32   `protobuf:"varint,2,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
	TotalAmount   float64  `protobuf:"fixed64,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	PaymentStatus string   `protobuf:"bytes,4,opt,name=payment_status,json=paymentStatus,proto3" json:"payment_status,omitempty"`
	SeatIds       []uint32 `protobuf:"varint,5,rep,packed,name=seat_ids,json=seatIds,proto3" json:"seat_ids,omitempty"`
}

func (x *CreateBookingRequest) Reset() {
	*x = CreateBookingRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingRequest) ProtoMessage() {}

func (x *CreateBookingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingRequest.ProtoReflect.Descriptor instead.
func (*CreateBookingRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBookingRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateBookingRequest) GetShowtimeId() uint32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

func (x *CreateBookingRequest) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *CreateBookingRequest) GetPaymentStatus() string {
	if x != nil {
		return x.PaymentStatus
	}
	return ""
}

func (x *CreateBookingRequest) GetSeatIds() []uint32 {
	if x != nil {
		return x.SeatIds
	}
	return nil
}

type CreateBookingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateBookingResponse) Reset() {
	*x = CreateBookingResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBookingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBookingResponse) ProtoMessage() {}

func (x *CreateBookingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBookingResponse.ProtoReflect.Descriptor instead.
func (*CreateBookingResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBookingResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

func (x *CreateBookingResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetBookingByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId uint32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
}

func (x *GetBookingByIDRequest) Reset() {
	*x = GetBookingByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByIDRequest) ProtoMessage() {}

func (x *GetBookingByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByIDRequest.ProtoReflect.Descriptor instead.
func (*GetBookingByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{4}
}

func (x *GetBookingByIDRequest) GetBookingId() uint32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

type GetBookingByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Booking *Booking `protobuf:"bytes,1,opt,name=booking,proto3" json:"booking,omitempty"`
}

func (x *GetBookingByIDResponse) Reset() {
	*x = GetBookingByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookingByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookingByIDResponse) ProtoMessage() {}

func (x *GetBookingByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookingByIDResponse.ProtoReflect.Descriptor instead.
func (*GetBookingByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{5}
}

func (x *GetBookingByIDResponse) GetBooking() *Booking {
	if x != nil {
		return x.Booking
	}
	return nil
}

type ListBookingsByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListBookingsByUserRequest) Reset() {
	*x = ListBookingsByUserRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBookingsByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookingsByUserRequest) ProtoMessage() {}

func (x *ListBookingsByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookingsByUserRequest.ProtoReflect.Descriptor instead.
func (*ListBookingsByUserRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{6}
}

func (x *ListBookingsByUserRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ListBookingsByUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bookings []*Booking `protobuf:"bytes,1,rep,name=bookings,proto3" json:"bookings,omitempty"`
}

func (x *ListBookingsByUserResponse) Reset() {
	*x = ListBookingsByUserResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBookingsByUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBookingsByUserResponse) ProtoMessage() {}

func (x *ListBookingsByUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBookingsByUserResponse.ProtoReflect.Descriptor instead.
func (*ListBookingsByUserResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{7}
}

func (x *ListBookingsByUserResponse) GetBookings() []*Booking {
	if x != nil {
		return x.Bookings
	}
	return nil
}

type DeleteBookingByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId int32 `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
}

func (x *DeleteBookingByIDRequest) Reset() {
	*x = DeleteBookingByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBookingByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookingByIDRequest) ProtoMessage() {}

func (x *DeleteBookingByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookingByIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookingByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteBookingByIDRequest) GetBookingId() int32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

type DeleteBookingByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteBookingByIDResponse) Reset() {
	*x = DeleteBookingByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBookingByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookingByIDResponse) ProtoMessage() {}

func (x *DeleteBookingByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookingByIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteBookingByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteBookingByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateBookingStatusByBookingIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BookingId int32  `protobuf:"varint,1,opt,name=booking_id,json=bookingId,proto3" json:"booking_id,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateBookingStatusByBookingIDRequest) Reset() {
	*x = UpdateBookingStatusByBookingIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookingStatusByBookingIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookingStatusByBookingIDRequest) ProtoMessage() {}

func (x *UpdateBookingStatusByBookingIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookingStatusByBookingIDRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookingStatusByBookingIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateBookingStatusByBookingIDRequest) GetBookingId() int32 {
	if x != nil {
		return x.BookingId
	}
	return 0
}

func (x *UpdateBookingStatusByBookingIDRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateBookingStatusByBookingIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateBookingStatusByBookingIDResponse) Reset() {
	*x = UpdateBookingStatusByBookingIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookingStatusByBookingIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookingStatusByBookingIDResponse) ProtoMessage() {}

func (x *UpdateBookingStatusByBookingIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookingStatusByBookingIDResponse.ProtoReflect.Descriptor instead.
func (*UpdateBookingStatusByBookingIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateBookingStatusByBookingIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Theaters
type GetTheatersAndMovieScheduleByMovieNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTheatersAndMovieScheduleByMovieNameRequest) Reset() {
	*x = GetTheatersAndMovieScheduleByMovieNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersAndMovieScheduleByMovieNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersAndMovieScheduleByMovieNameRequest) ProtoMessage() {}

func (x *GetTheatersAndMovieScheduleByMovieNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersAndMovieScheduleByMovieNameRequest.ProtoReflect.Descriptor instead.
func (*GetTheatersAndMovieScheduleByMovieNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{12}
}

func (x *GetTheatersAndMovieScheduleByMovieNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTheatersAndMovieScheduleByMovieNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieScedule []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_scedule,json=movieScedule,proto3" json:"movie_scedule,omitempty"`
}

func (x *GetTheatersAndMovieScheduleByMovieNameResponse) Reset() {
	*x = GetTheatersAndMovieScheduleByMovieNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersAndMovieScheduleByMovieNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersAndMovieScheduleByMovieNameResponse) ProtoMessage() {}

func (x *GetTheatersAndMovieScheduleByMovieNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersAndMovieScheduleByMovieNameResponse.ProtoReflect.Descriptor instead.
func (*GetTheatersAndMovieScheduleByMovieNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{13}
}

func (x *GetTheatersAndMovieScheduleByMovieNameResponse) GetMovieScedule() []*MovieSchedule {
	if x != nil {
		return x.MovieScedule
	}
	return nil
}

type GetMovieByNameAndLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetMovieByNameAndLanguageRequest) Reset() {
	*x = GetMovieByNameAndLanguageRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieByNameAndLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieByNameAndLanguageRequest) ProtoMessage() {}

func (x *GetMovieByNameAndLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieByNameAndLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetMovieByNameAndLanguageRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{14}
}

func (x *GetMovieByNameAndLanguageRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMovieByNameAndLanguageRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetMovieByNameAndLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movie *Movie `protobuf:"bytes,1,opt,name=Movie,proto3" json:"Movie,omitempty"`
}

func (x *GetMovieByNameAndLanguageResponse) Reset() {
	*x = GetMovieByNameAndLanguageResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieByNameAndLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieByNameAndLanguageResponse) ProtoMessage() {}

func (x *GetMovieByNameAndLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieByNameAndLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetMovieByNameAndLanguageResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{15}
}

func (x *GetMovieByNameAndLanguageResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type GetMovieByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieName string `protobuf:"bytes,1,opt,name=movie_name,json=movieName,proto3" json:"movie_name,omitempty"`
}

func (x *GetMovieByNameRequest) Reset() {
	*x = GetMovieByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieByNameRequest) ProtoMessage() {}

func (x *GetMovieByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieByNameRequest.ProtoReflect.Descriptor instead.
func (*GetMovieByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{16}
}

func (x *GetMovieByNameRequest) GetMovieName() string {
	if x != nil {
		return x.MovieName
	}
	return ""
}

type GetMovieByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movie *Movie `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
}

func (x *GetMovieByNameResponse) Reset() {
	*x = GetMovieByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieByNameResponse) ProtoMessage() {}

func (x *GetMovieByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieByNameResponse.ProtoReflect.Descriptor instead.
func (*GetMovieByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{17}
}

func (x *GetMovieByNameResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type GetMoviesByGenreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genre string `protobuf:"bytes,1,opt,name=genre,proto3" json:"genre,omitempty"`
}

func (x *GetMoviesByGenreRequest) Reset() {
	*x = GetMoviesByGenreRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMoviesByGenreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByGenreRequest) ProtoMessage() {}

func (x *GetMoviesByGenreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByGenreRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesByGenreRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{18}
}

func (x *GetMoviesByGenreRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

type GetMoviesByGenreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movie []*Movie `protobuf:"bytes,1,rep,name=movie,proto3" json:"movie,omitempty"`
}

func (x *GetMoviesByGenreResponse) Reset() {
	*x = GetMoviesByGenreResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMoviesByGenreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByGenreResponse) ProtoMessage() {}

func (x *GetMoviesByGenreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByGenreResponse.ProtoReflect.Descriptor instead.
func (*GetMoviesByGenreResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{19}
}

func (x *GetMoviesByGenreResponse) GetMovie() []*Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type GetMoviesByLanguageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *GetMoviesByLanguageRequest) Reset() {
	*x = GetMoviesByLanguageRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMoviesByLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByLanguageRequest) ProtoMessage() {}

func (x *GetMoviesByLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByLanguageRequest.ProtoReflect.Descriptor instead.
func (*GetMoviesByLanguageRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{20}
}

func (x *GetMoviesByLanguageRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type GetMoviesByLanguageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movie []*Movie `protobuf:"bytes,1,rep,name=movie,proto3" json:"movie,omitempty"`
}

func (x *GetMoviesByLanguageResponse) Reset() {
	*x = GetMoviesByLanguageResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMoviesByLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMoviesByLanguageResponse) ProtoMessage() {}

func (x *GetMoviesByLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMoviesByLanguageResponse.ProtoReflect.Descriptor instead.
func (*GetMoviesByLanguageResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{21}
}

func (x *GetMoviesByLanguageResponse) GetMovie() []*Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type GetTheatersByCityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	City string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
}

func (x *GetTheatersByCityRequest) Reset() {
	*x = GetTheatersByCityRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByCityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByCityRequest) ProtoMessage() {}

func (x *GetTheatersByCityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByCityRequest.ProtoReflect.Descriptor instead.
func (*GetTheatersByCityRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{22}
}

func (x *GetTheatersByCityRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type GetTheatersByCityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater []*Theater `protobuf:"bytes,1,rep,name=theater,proto3" json:"theater,omitempty"`
}

func (x *GetTheatersByCityResponse) Reset() {
	*x = GetTheatersByCityResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByCityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByCityResponse) ProtoMessage() {}

func (x *GetTheatersByCityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByCityResponse.ProtoReflect.Descriptor instead.
func (*GetTheatersByCityResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{23}
}

func (x *GetTheatersByCityResponse) GetTheater() []*Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

type GetTheatersByMovieIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *GetTheatersByMovieIdRequest) Reset() {
	*x = GetTheatersByMovieIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByMovieIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByMovieIdRequest) ProtoMessage() {}

func (x *GetTheatersByMovieIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByMovieIdRequest.ProtoReflect.Descriptor instead.
func (*GetTheatersByMovieIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{24}
}

func (x *GetTheatersByMovieIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type GetTheatersByMovieIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater []*Theater `protobuf:"bytes,1,rep,name=theater,proto3" json:"theater,omitempty"`
}

func (x *GetTheatersByMovieIdResponse) Reset() {
	*x = GetTheatersByMovieIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByMovieIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByMovieIdResponse) ProtoMessage() {}

func (x *GetTheatersByMovieIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByMovieIdResponse.ProtoReflect.Descriptor instead.
func (*GetTheatersByMovieIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{25}
}

func (x *GetTheatersByMovieIdResponse) GetTheater() []*Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

type GetScreensAndMovieScedulesByTheaterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *GetScreensAndMovieScedulesByTheaterIdRequest) Reset() {
	*x = GetScreensAndMovieScedulesByTheaterIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreensAndMovieScedulesByTheaterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreensAndMovieScedulesByTheaterIdRequest) ProtoMessage() {}

func (x *GetScreensAndMovieScedulesByTheaterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreensAndMovieScedulesByTheaterIdRequest.ProtoReflect.Descriptor instead.
func (*GetScreensAndMovieScedulesByTheaterIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{26}
}

func (x *GetScreensAndMovieScedulesByTheaterIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type GetScreensAndMovieScedulesByTheaterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater       *Theater         `protobuf:"bytes,1,opt,name=theater,proto3" json:"theater,omitempty"`
	MovieSchedule []*MovieSchedule `protobuf:"bytes,3,rep,name=movie_schedule,json=movieSchedule,proto3" json:"movie_schedule,omitempty"`
	TheaterScreen []*TheaterScreen `protobuf:"bytes,5,rep,name=theater_screen,json=theaterScreen,proto3" json:"theater_screen,omitempty"`
}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) Reset() {
	*x = GetScreensAndMovieScedulesByTheaterIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreensAndMovieScedulesByTheaterIdResponse) ProtoMessage() {}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreensAndMovieScedulesByTheaterIdResponse.ProtoReflect.Descriptor instead.
func (*GetScreensAndMovieScedulesByTheaterIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{27}
}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) GetMovieSchedule() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedule
	}
	return nil
}

func (x *GetScreensAndMovieScedulesByTheaterIdResponse) GetTheaterScreen() []*TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type ListShowTimeByTheaterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *ListShowTimeByTheaterIdRequest) Reset() {
	*x = ListShowTimeByTheaterIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowTimeByTheaterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowTimeByTheaterIdRequest) ProtoMessage() {}

func (x *ListShowTimeByTheaterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowTimeByTheaterIdRequest.ProtoReflect.Descriptor instead.
func (*ListShowTimeByTheaterIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{28}
}

func (x *ListShowTimeByTheaterIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type ListShowTimeByTheaterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater  *Theater    `protobuf:"bytes,1,opt,name=theater,proto3" json:"theater,omitempty"`
	ShowTime []*Showtime `protobuf:"bytes,3,rep,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
}

func (x *ListShowTimeByTheaterIdResponse) Reset() {
	*x = ListShowTimeByTheaterIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowTimeByTheaterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowTimeByTheaterIdResponse) ProtoMessage() {}

func (x *ListShowTimeByTheaterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowTimeByTheaterIdResponse.ProtoReflect.Descriptor instead.
func (*ListShowTimeByTheaterIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{29}
}

func (x *ListShowTimeByTheaterIdResponse) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

func (x *ListShowTimeByTheaterIdResponse) GetShowTime() []*Showtime {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

type ListShowTimeByTheaterIdandMovieIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	MovieId   int32 `protobuf:"varint,2,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *ListShowTimeByTheaterIdandMovieIdRequest) Reset() {
	*x = ListShowTimeByTheaterIdandMovieIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowTimeByTheaterIdandMovieIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowTimeByTheaterIdandMovieIdRequest) ProtoMessage() {}

func (x *ListShowTimeByTheaterIdandMovieIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowTimeByTheaterIdandMovieIdRequest.ProtoReflect.Descriptor instead.
func (*ListShowTimeByTheaterIdandMovieIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{30}
}

func (x *ListShowTimeByTheaterIdandMovieIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *ListShowTimeByTheaterIdandMovieIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type ListShowTimeByTheaterIdandMovieIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater  *Theater    `protobuf:"bytes,1,opt,name=theater,proto3" json:"theater,omitempty"`
	Movie    *Movie      `protobuf:"bytes,2,opt,name=movie,proto3" json:"movie,omitempty"`
	ShowTime []*Showtime `protobuf:"bytes,3,rep,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) Reset() {
	*x = ListShowTimeByTheaterIdandMovieIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowTimeByTheaterIdandMovieIdResponse) ProtoMessage() {}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowTimeByTheaterIdandMovieIdResponse.ProtoReflect.Descriptor instead.
func (*ListShowTimeByTheaterIdandMovieIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{31}
}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

func (x *ListShowTimeByTheaterIdandMovieIdResponse) GetShowTime() []*Showtime {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

// Seats
type Seat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int32          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScreenId          int32          `protobuf:"varint,2,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	Row               string         `protobuf:"bytes,3,opt,name=row,proto3" json:"row,omitempty"`
	Column            int32          `protobuf:"varint,4,opt,name=column,proto3" json:"column,omitempty"`
	SeatNumber        string         `protobuf:"bytes,5,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`
	SeatCategoryId    int32          `protobuf:"varint,6,opt,name=seat_category_id,json=seatCategoryId,proto3" json:"seat_category_id,omitempty"`
	SeatCategoryPrice float64        `protobuf:"fixed64,7,opt,name=seat_category_price,json=seatCategoryPrice,proto3" json:"seat_category_price,omitempty"`
	TheaterScreen     *TheaterScreen `protobuf:"bytes,8,opt,name=theater_screen,json=theaterScreen,proto3" json:"theater_screen,omitempty"`
	SeatCategory      *SeatCategory  `protobuf:"bytes,9,opt,name=seat_category,json=seatCategory,proto3" json:"seat_category,omitempty"`
}

func (x *Seat) Reset() {
	*x = Seat{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Seat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Seat) ProtoMessage() {}

func (x *Seat) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Seat.ProtoReflect.Descriptor instead.
func (*Seat) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{32}
}

func (x *Seat) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Seat) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

func (x *Seat) GetRow() string {
	if x != nil {
		return x.Row
	}
	return ""
}

func (x *Seat) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Seat) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *Seat) GetSeatCategoryId() int32 {
	if x != nil {
		return x.SeatCategoryId
	}
	return 0
}

func (x *Seat) GetSeatCategoryPrice() float64 {
	if x != nil {
		return x.SeatCategoryPrice
	}
	return 0
}

func (x *Seat) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

func (x *Seat) GetSeatCategory() *SeatCategory {
	if x != nil {
		return x.SeatCategory
	}
	return nil
}

type CreateSeatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId          int32                      `protobuf:"varint,1,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	TotalRows         int32                      `protobuf:"varint,2,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	TotalColumns      int32                      `protobuf:"varint,3,opt,name=total_columns,json=totalColumns,proto3" json:"total_columns,omitempty"`
	RowseatCategories []*RowAndSeatCategoryPrice `protobuf:"bytes,4,rep,name=rowseat_categories,json=rowseatCategories,proto3" json:"rowseat_categories,omitempty"`
	OwnerId           int32                      `protobuf:"varint,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *CreateSeatsRequest) Reset() {
	*x = CreateSeatsRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSeatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatsRequest) ProtoMessage() {}

func (x *CreateSeatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatsRequest.ProtoReflect.Descriptor instead.
func (*CreateSeatsRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{33}
}

func (x *CreateSeatsRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

func (x *CreateSeatsRequest) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *CreateSeatsRequest) GetTotalColumns() int32 {
	if x != nil {
		return x.TotalColumns
	}
	return 0
}

func (x *CreateSeatsRequest) GetRowseatCategories() []*RowAndSeatCategoryPrice {
	if x != nil {
		return x.RowseatCategories
	}
	return nil
}

func (x *CreateSeatsRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type RowAndSeatCategoryPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowStart          string  `protobuf:"bytes,1,opt,name=row_start,json=rowStart,proto3" json:"row_start,omitempty"`
	RowEnd            string  `protobuf:"bytes,2,opt,name=row_end,json=rowEnd,proto3" json:"row_end,omitempty"`
	SeatCategoryId    int32   `protobuf:"varint,3,opt,name=seat_category_id,json=seatCategoryId,proto3" json:"seat_category_id,omitempty"`
	SeatCategoryPrice float64 `protobuf:"fixed64,4,opt,name=seat_category_price,json=seatCategoryPrice,proto3" json:"seat_category_price,omitempty"`
}

func (x *RowAndSeatCategoryPrice) Reset() {
	*x = RowAndSeatCategoryPrice{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RowAndSeatCategoryPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowAndSeatCategoryPrice) ProtoMessage() {}

func (x *RowAndSeatCategoryPrice) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowAndSeatCategoryPrice.ProtoReflect.Descriptor instead.
func (*RowAndSeatCategoryPrice) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{34}
}

func (x *RowAndSeatCategoryPrice) GetRowStart() string {
	if x != nil {
		return x.RowStart
	}
	return ""
}

func (x *RowAndSeatCategoryPrice) GetRowEnd() string {
	if x != nil {
		return x.RowEnd
	}
	return ""
}

func (x *RowAndSeatCategoryPrice) GetSeatCategoryId() int32 {
	if x != nil {
		return x.SeatCategoryId
	}
	return 0
}

func (x *RowAndSeatCategoryPrice) GetSeatCategoryPrice() float64 {
	if x != nil {
		return x.SeatCategoryPrice
	}
	return 0
}

type GetSeatBySeatNumberAndScreenIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNumber string `protobuf:"bytes,1,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`
	ScreenId   int32  `protobuf:"varint,2,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
}

func (x *GetSeatBySeatNumberAndScreenIdRequest) Reset() {
	*x = GetSeatBySeatNumberAndScreenIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatBySeatNumberAndScreenIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatBySeatNumberAndScreenIdRequest) ProtoMessage() {}

func (x *GetSeatBySeatNumberAndScreenIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatBySeatNumberAndScreenIdRequest.ProtoReflect.Descriptor instead.
func (*GetSeatBySeatNumberAndScreenIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{35}
}

func (x *GetSeatBySeatNumberAndScreenIdRequest) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *GetSeatBySeatNumberAndScreenIdRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

type GetSeatBySeatNumberAndScreenIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat *Seat `protobuf:"bytes,1,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (x *GetSeatBySeatNumberAndScreenIdResponse) Reset() {
	*x = GetSeatBySeatNumberAndScreenIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatBySeatNumberAndScreenIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatBySeatNumberAndScreenIdResponse) ProtoMessage() {}

func (x *GetSeatBySeatNumberAndScreenIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatBySeatNumberAndScreenIdResponse.ProtoReflect.Descriptor instead.
func (*GetSeatBySeatNumberAndScreenIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{36}
}

func (x *GetSeatBySeatNumberAndScreenIdResponse) GetSeat() *Seat {
	if x != nil {
		return x.Seat
	}
	return nil
}

type GetSeatByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSeatByIdRequest) Reset() {
	*x = GetSeatByIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatByIdRequest) ProtoMessage() {}

func (x *GetSeatByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatByIdRequest.ProtoReflect.Descriptor instead.
func (*GetSeatByIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{37}
}

func (x *GetSeatByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSeatByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat *Seat `protobuf:"bytes,1,opt,name=seat,proto3" json:"seat,omitempty"`
}

func (x *GetSeatByIdResponse) Reset() {
	*x = GetSeatByIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatByIdResponse) ProtoMessage() {}

func (x *GetSeatByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatByIdResponse.ProtoReflect.Descriptor instead.
func (*GetSeatByIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{38}
}

func (x *GetSeatByIdResponse) GetSeat() *Seat {
	if x != nil {
		return x.Seat
	}
	return nil
}

type CreateSeatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CreateSeatsResponse) Reset() {
	*x = CreateSeatsResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSeatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeatsResponse) ProtoMessage() {}

func (x *CreateSeatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeatsResponse.ProtoReflect.Descriptor instead.
func (*CreateSeatsResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{39}
}

func (x *CreateSeatsResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetSeatsByScreenIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenId int32 `protobuf:"varint,1,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
}

func (x *GetSeatsByScreenIDRequest) Reset() {
	*x = GetSeatsByScreenIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatsByScreenIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatsByScreenIDRequest) ProtoMessage() {}

func (x *GetSeatsByScreenIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatsByScreenIDRequest.ProtoReflect.Descriptor instead.
func (*GetSeatsByScreenIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{40}
}

func (x *GetSeatsByScreenIDRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

type GetSeatsByScreenIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seats []*Seat `protobuf:"bytes,1,rep,name=seats,proto3" json:"seats,omitempty"`
}

func (x *GetSeatsByScreenIDResponse) Reset() {
	*x = GetSeatsByScreenIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatsByScreenIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatsByScreenIDResponse) ProtoMessage() {}

func (x *GetSeatsByScreenIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatsByScreenIDResponse.ProtoReflect.Descriptor instead.
func (*GetSeatsByScreenIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{41}
}

func (x *GetSeatsByScreenIDResponse) GetSeats() []*Seat {
	if x != nil {
		return x.Seats
	}
	return nil
}

type DeleteSeatByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteSeatByIdRequest) Reset() {
	*x = DeleteSeatByIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatByIdRequest) ProtoMessage() {}

func (x *DeleteSeatByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeatByIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteSeatByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteSeatByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSeatByIdResponse) Reset() {
	*x = DeleteSeatByIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatByIdResponse) ProtoMessage() {}

func (x *DeleteSeatByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteSeatByIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{43}
}

type DeleteSeatBySeatNumberAndScreenIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatNumber string `protobuf:"bytes,1,opt,name=seat_number,json=seatNumber,proto3" json:"seat_number,omitempty"`
	ScreenId   int32  `protobuf:"varint,2,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
}

func (x *DeleteSeatBySeatNumberAndScreenIDRequest) Reset() {
	*x = DeleteSeatBySeatNumberAndScreenIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatBySeatNumberAndScreenIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatBySeatNumberAndScreenIDRequest) ProtoMessage() {}

func (x *DeleteSeatBySeatNumberAndScreenIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatBySeatNumberAndScreenIDRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeatBySeatNumberAndScreenIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteSeatBySeatNumberAndScreenIDRequest) GetSeatNumber() string {
	if x != nil {
		return x.SeatNumber
	}
	return ""
}

func (x *DeleteSeatBySeatNumberAndScreenIDRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

type DeleteSeatBySeatNumberAndScreenIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSeatBySeatNumberAndScreenIDResponse) Reset() {
	*x = DeleteSeatBySeatNumberAndScreenIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatBySeatNumberAndScreenIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatBySeatNumberAndScreenIDResponse) ProtoMessage() {}

func (x *DeleteSeatBySeatNumberAndScreenIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatBySeatNumberAndScreenIDResponse.ProtoReflect.Descriptor instead.
func (*DeleteSeatBySeatNumberAndScreenIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{45}
}

// Movie Schedule related messages
type MovieSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MovieId    int32     `protobuf:"varint,2,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	TheaterId  int32     `protobuf:"varint,3,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	ShowtimeId int32     `protobuf:"varint,4,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
	Movie      *Movie    `protobuf:"bytes,5,opt,name=movie,proto3" json:"movie,omitempty"`
	Theater    *Theater  `protobuf:"bytes,6,opt,name=theater,proto3" json:"theater,omitempty"`
	ShowTime   *Showtime `protobuf:"bytes,7,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
}

func (x *MovieSchedule) Reset() {
	*x = MovieSchedule{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovieSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovieSchedule) ProtoMessage() {}

func (x *MovieSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovieSchedule.ProtoReflect.Descriptor instead.
func (*MovieSchedule) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{46}
}

func (x *MovieSchedule) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MovieSchedule) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *MovieSchedule) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *MovieSchedule) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

func (x *MovieSchedule) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

func (x *MovieSchedule) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

func (x *MovieSchedule) GetShowTime() *Showtime {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

type AddMovieScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedule *MovieSchedule `protobuf:"bytes,1,opt,name=movie_schedule,json=movieSchedule,proto3" json:"movie_schedule,omitempty"`
	OwnerId       int32          `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *AddMovieScheduleRequest) Reset() {
	*x = AddMovieScheduleRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMovieScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMovieScheduleRequest) ProtoMessage() {}

func (x *AddMovieScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMovieScheduleRequest.ProtoReflect.Descriptor instead.
func (*AddMovieScheduleRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{47}
}

func (x *AddMovieScheduleRequest) GetMovieSchedule() *MovieSchedule {
	if x != nil {
		return x.MovieSchedule
	}
	return nil
}

func (x *AddMovieScheduleRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type AddMovieScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddMovieScheduleResponse) Reset() {
	*x = AddMovieScheduleResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddMovieScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMovieScheduleResponse) ProtoMessage() {}

func (x *AddMovieScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMovieScheduleResponse.ProtoReflect.Descriptor instead.
func (*AddMovieScheduleResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{48}
}

func (x *AddMovieScheduleResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddMovieScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMovieScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedule *MovieSchedule `protobuf:"bytes,1,opt,name=movie_schedule,json=movieSchedule,proto3" json:"movie_schedule,omitempty"`
	OwnerId       int32          `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *UpdateMovieScheduleRequest) Reset() {
	*x = UpdateMovieScheduleRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMovieScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieScheduleRequest) ProtoMessage() {}

func (x *UpdateMovieScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieScheduleRequest.ProtoReflect.Descriptor instead.
func (*UpdateMovieScheduleRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{49}
}

func (x *UpdateMovieScheduleRequest) GetMovieSchedule() *MovieSchedule {
	if x != nil {
		return x.MovieSchedule
	}
	return nil
}

func (x *UpdateMovieScheduleRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type UpdateMovieScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMovieScheduleResponse) Reset() {
	*x = UpdateMovieScheduleResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMovieScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieScheduleResponse) ProtoMessage() {}

func (x *UpdateMovieScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieScheduleResponse.ProtoReflect.Descriptor instead.
func (*UpdateMovieScheduleResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{50}
}

func (x *UpdateMovieScheduleResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMovieScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetAllMovieScheduleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *GetAllMovieScheduleRequest) Reset() {
	*x = GetAllMovieScheduleRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMovieScheduleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMovieScheduleRequest) ProtoMessage() {}

func (x *GetAllMovieScheduleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMovieScheduleRequest.ProtoReflect.Descriptor instead.
func (*GetAllMovieScheduleRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{51}
}

func (x *GetAllMovieScheduleRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type GetAllMovieScheduleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetAllMovieScheduleResponse) Reset() {
	*x = GetAllMovieScheduleResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllMovieScheduleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllMovieScheduleResponse) ProtoMessage() {}

func (x *GetAllMovieScheduleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllMovieScheduleResponse.ProtoReflect.Descriptor instead.
func (*GetAllMovieScheduleResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{52}
}

func (x *GetAllMovieScheduleResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetAllMovieScheduleResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMovieScheduleByMovieIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *GetMovieScheduleByMovieIdRequest) Reset() {
	*x = GetMovieScheduleByMovieIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdRequest) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdRequest.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{53}
}

func (x *GetMovieScheduleByMovieIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type GetMovieScheduleByMovieIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMovieScheduleByMovieIdResponse) Reset() {
	*x = GetMovieScheduleByMovieIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdResponse) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdResponse.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{54}
}

func (x *GetMovieScheduleByMovieIdResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetMovieScheduleByMovieIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMovieScheduleByTheaterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *GetMovieScheduleByTheaterIdRequest) Reset() {
	*x = GetMovieScheduleByTheaterIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByTheaterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByTheaterIdRequest) ProtoMessage() {}

func (x *GetMovieScheduleByTheaterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByTheaterIdRequest.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByTheaterIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{55}
}

func (x *GetMovieScheduleByTheaterIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type GetMovieScheduleByTheaterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMovieScheduleByTheaterIdResponse) Reset() {
	*x = GetMovieScheduleByTheaterIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByTheaterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByTheaterIdResponse) ProtoMessage() {}

func (x *GetMovieScheduleByTheaterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByTheaterIdResponse.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByTheaterIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{56}
}

func (x *GetMovieScheduleByTheaterIdResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetMovieScheduleByTheaterIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMovieScheduleByMovieIdAndTheaterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId   int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	TheaterId int32 `protobuf:"varint,2,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdRequest) Reset() {
	*x = GetMovieScheduleByMovieIdAndTheaterIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdAndTheaterIdRequest) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdAndTheaterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdAndTheaterIdRequest.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdAndTheaterIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{57}
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type GetMovieScheduleByMovieIdAndTheaterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdResponse) Reset() {
	*x = GetMovieScheduleByMovieIdAndTheaterIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdAndTheaterIdResponse) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdAndTheaterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdAndTheaterIdResponse.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdAndTheaterIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{58}
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetMovieScheduleByMovieIdAndTheaterIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMovieScheduleByMovieIdAndShowTimeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId    int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	ShowtimeId int32 `protobuf:"varint,2,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdRequest) Reset() {
	*x = GetMovieScheduleByMovieIdAndShowTimeIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdAndShowTimeIdRequest) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdAndShowTimeIdRequest.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdAndShowTimeIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{59}
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdRequest) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

type GetMovieScheduleByMovieIdAndShowTimeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdResponse) Reset() {
	*x = GetMovieScheduleByMovieIdAndShowTimeIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByMovieIdAndShowTimeIdResponse) ProtoMessage() {}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByMovieIdAndShowTimeIdResponse.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByMovieIdAndShowTimeIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{60}
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetMovieScheduleByMovieIdAndShowTimeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId  int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	ShowtimeId int32 `protobuf:"varint,2,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) Reset() {
	*x = GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) ProtoMessage() {}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest.ProtoReflect.Descriptor instead.
func (*GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{61}
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

type GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedules []*MovieSchedule `protobuf:"bytes,1,rep,name=movie_schedules,json=movieSchedules,proto3" json:"movie_schedules,omitempty"`
	Message        string           `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) Reset() {
	*x = GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) ProtoMessage() {}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse.ProtoReflect.Descriptor instead.
func (*GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{62}
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) GetMovieSchedules() []*MovieSchedule {
	if x != nil {
		return x.MovieSchedules
	}
	return nil
}

func (x *GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMovieScheduleByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMovieScheduleByIDRequest) Reset() {
	*x = GetMovieScheduleByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByIDRequest) ProtoMessage() {}

func (x *GetMovieScheduleByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByIDRequest.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{63}
}

func (x *GetMovieScheduleByIDRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetMovieScheduleByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieSchedule *MovieSchedule `protobuf:"bytes,1,opt,name=movie_schedule,json=movieSchedule,proto3" json:"movie_schedule,omitempty"`
	Message       string         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GetMovieScheduleByIDResponse) Reset() {
	*x = GetMovieScheduleByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieScheduleByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieScheduleByIDResponse) ProtoMessage() {}

func (x *GetMovieScheduleByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieScheduleByIDResponse.ProtoReflect.Descriptor instead.
func (*GetMovieScheduleByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{64}
}

func (x *GetMovieScheduleByIDResponse) GetMovieSchedule() *MovieSchedule {
	if x != nil {
		return x.MovieSchedule
	}
	return nil
}

func (x *GetMovieScheduleByIDResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMovieScheduleByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMovieScheduleByIdRequest) Reset() {
	*x = DeleteMovieScheduleByIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByIdRequest) ProtoMessage() {}

func (x *DeleteMovieScheduleByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{65}
}

func (x *DeleteMovieScheduleByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMovieScheduleByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMovieScheduleByIdResponse) Reset() {
	*x = DeleteMovieScheduleByIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByIdResponse) ProtoMessage() {}

func (x *DeleteMovieScheduleByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteMovieScheduleByIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMovieScheduleByMovieIdAndTheaterIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId   int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	TheaterId int32 `protobuf:"varint,2,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdRequest) Reset() {
	*x = DeleteMovieScheduleByMovieIdAndTheaterIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByMovieIdAndTheaterIdRequest) ProtoMessage() {}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByMovieIdAndTheaterIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByMovieIdAndTheaterIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{67}
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type DeleteMovieScheduleByMovieIdAndTheaterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdResponse) Reset() {
	*x = DeleteMovieScheduleByMovieIdAndTheaterIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByMovieIdAndTheaterIdResponse) ProtoMessage() {}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByMovieIdAndTheaterIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByMovieIdAndTheaterIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{68}
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId    int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	TheaterId  int32 `protobuf:"varint,2,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	ShowtimeId int32 `protobuf:"varint,3,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) Reset() {
	*x = DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) ProtoMessage() {}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{69}
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

type DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) Reset() {
	*x = DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) ProtoMessage() {}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse.ProtoReflect.Descriptor instead.
func (*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{70}
}

func (x *DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Movie related messages
type RegisterMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Duration    int32   `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	Genre       string  `protobuf:"bytes,4,opt,name=genre,proto3" json:"genre,omitempty"`
	ReleaseDate string  `protobuf:"bytes,5,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Rating      float32 `protobuf:"fixed32,6,opt,name=rating,proto3" json:"rating,omitempty"`
	Language    string  `protobuf:"bytes,7,opt,name=Language,proto3" json:"Language,omitempty"`
}

func (x *RegisterMovieRequest) Reset() {
	*x = RegisterMovieRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMovieRequest) ProtoMessage() {}

func (x *RegisterMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMovieRequest.ProtoReflect.Descriptor instead.
func (*RegisterMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{71}
}

func (x *RegisterMovieRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RegisterMovieRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisterMovieRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *RegisterMovieRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *RegisterMovieRequest) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *RegisterMovieRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *RegisterMovieRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type RegisterMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId uint32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterMovieResponse) Reset() {
	*x = RegisterMovieResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMovieResponse) ProtoMessage() {}

func (x *RegisterMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMovieResponse.ProtoReflect.Descriptor instead.
func (*RegisterMovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{72}
}

func (x *RegisterMovieResponse) GetMovieId() uint32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *RegisterMovieResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type UpdateMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId     uint32  `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	Title       string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Duration    int32   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Genre       string  `protobuf:"bytes,5,opt,name=genre,proto3" json:"genre,omitempty"`
	ReleaseDate string  `protobuf:"bytes,6,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Rating      float32 `protobuf:"fixed32,7,opt,name=rating,proto3" json:"rating,omitempty"`
	Language    string  `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *UpdateMovieRequest) Reset() {
	*x = UpdateMovieRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieRequest) ProtoMessage() {}

func (x *UpdateMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieRequest.ProtoReflect.Descriptor instead.
func (*UpdateMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateMovieRequest) GetMovieId() uint32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *UpdateMovieRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateMovieRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateMovieRequest) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *UpdateMovieRequest) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *UpdateMovieRequest) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *UpdateMovieRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UpdateMovieRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type UpdateMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateMovieResponse) Reset() {
	*x = UpdateMovieResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMovieResponse) ProtoMessage() {}

func (x *UpdateMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMovieResponse.ProtoReflect.Descriptor instead.
func (*UpdateMovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{74}
}

func (x *UpdateMovieResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListMoviesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListMoviesRequest) Reset() {
	*x = ListMoviesRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMoviesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMoviesRequest) ProtoMessage() {}

func (x *ListMoviesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMoviesRequest.ProtoReflect.Descriptor instead.
func (*ListMoviesRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{75}
}

func (x *ListMoviesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMoviesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type Movie struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId     uint32  `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	Title       string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Duration    int32   `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`
	Genre       string  `protobuf:"bytes,5,opt,name=genre,proto3" json:"genre,omitempty"`
	ReleaseDate string  `protobuf:"bytes,6,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	Rating      float32 `protobuf:"fixed32,7,opt,name=rating,proto3" json:"rating,omitempty"`
	Language    string  `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *Movie) Reset() {
	*x = Movie{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Movie) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Movie) ProtoMessage() {}

func (x *Movie) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Movie.ProtoReflect.Descriptor instead.
func (*Movie) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{76}
}

func (x *Movie) GetMovieId() uint32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *Movie) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Movie) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Movie) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Movie) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Movie) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Movie) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Movie) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type ListMoviesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movies []*Movie `protobuf:"bytes,1,rep,name=movies,proto3" json:"movies,omitempty"`
}

func (x *ListMoviesResponse) Reset() {
	*x = ListMoviesResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMoviesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMoviesResponse) ProtoMessage() {}

func (x *ListMoviesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMoviesResponse.ProtoReflect.Descriptor instead.
func (*ListMoviesResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{77}
}

func (x *ListMoviesResponse) GetMovies() []*Movie {
	if x != nil {
		return x.Movies
	}
	return nil
}

type GetMovieDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId uint32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *GetMovieDetailsRequest) Reset() {
	*x = GetMovieDetailsRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieDetailsRequest) ProtoMessage() {}

func (x *GetMovieDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetMovieDetailsRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{78}
}

func (x *GetMovieDetailsRequest) GetMovieId() uint32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type GetMovieDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Movie *Movie `protobuf:"bytes,1,opt,name=movie,proto3" json:"movie,omitempty"`
}

func (x *GetMovieDetailsResponse) Reset() {
	*x = GetMovieDetailsResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMovieDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMovieDetailsResponse) ProtoMessage() {}

func (x *GetMovieDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMovieDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetMovieDetailsResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{79}
}

func (x *GetMovieDetailsResponse) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

type DeleteMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId uint32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *DeleteMovieRequest) Reset() {
	*x = DeleteMovieRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieRequest) ProtoMessage() {}

func (x *DeleteMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieRequest.ProtoReflect.Descriptor instead.
func (*DeleteMovieRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{80}
}

func (x *DeleteMovieRequest) GetMovieId() uint32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type DeleteMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMovieResponse) Reset() {
	*x = DeleteMovieResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMovieResponse) ProtoMessage() {}

func (x *DeleteMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMovieResponse.ProtoReflect.Descriptor instead.
func (*DeleteMovieResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{81}
}

func (x *DeleteMovieResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Theatres related messages
type Theater struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId       int32        `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	Name            string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Place           string       `protobuf:"bytes,3,opt,name=place,proto3" json:"place,omitempty"`
	City            string       `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	District        string       `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	State           string       `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	OwnerId         uint32       `protobuf:"varint,7,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	NumberOfScreens int32        `protobuf:"varint,8,opt,name=number_of_screens,json=numberOfScreens,proto3" json:"number_of_screens,omitempty"`
	TheaterTypeId   int32        `protobuf:"varint,9,opt,name=theater_type_id,json=theaterTypeId,proto3" json:"theater_type_id,omitempty"`
	TheaterType     *TheaterType `protobuf:"bytes,10,opt,name=theater_type,json=theaterType,proto3" json:"theater_type,omitempty"`
}

func (x *Theater) Reset() {
	*x = Theater{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Theater) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Theater) ProtoMessage() {}

func (x *Theater) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Theater.ProtoReflect.Descriptor instead.
func (*Theater) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{82}
}

func (x *Theater) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *Theater) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Theater) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *Theater) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Theater) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *Theater) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Theater) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *Theater) GetNumberOfScreens() int32 {
	if x != nil {
		return x.NumberOfScreens
	}
	return 0
}

func (x *Theater) GetTheaterTypeId() int32 {
	if x != nil {
		return x.TheaterTypeId
	}
	return 0
}

func (x *Theater) GetTheaterType() *TheaterType {
	if x != nil {
		return x.TheaterType
	}
	return nil
}

type AddTheaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Place           string `protobuf:"bytes,2,opt,name=place,proto3" json:"place,omitempty"`
	City            string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	District        string `protobuf:"bytes,4,opt,name=district,proto3" json:"district,omitempty"`
	State           string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	OwnerId         uint32 `protobuf:"varint,6,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	NumberOfScreens int32  `protobuf:"varint,7,opt,name=number_of_screens,json=numberOfScreens,proto3" json:"number_of_screens,omitempty"`
	TheaterTypeId   int32  `protobuf:"varint,8,opt,name=theater_type_id,json=theaterTypeId,proto3" json:"theater_type_id,omitempty"`
}

func (x *AddTheaterRequest) Reset() {
	*x = AddTheaterRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterRequest) ProtoMessage() {}

func (x *AddTheaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterRequest.ProtoReflect.Descriptor instead.
func (*AddTheaterRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{83}
}

func (x *AddTheaterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTheaterRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *AddTheaterRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *AddTheaterRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *AddTheaterRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AddTheaterRequest) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *AddTheaterRequest) GetNumberOfScreens() int32 {
	if x != nil {
		return x.NumberOfScreens
	}
	return 0
}

func (x *AddTheaterRequest) GetTheaterTypeId() int32 {
	if x != nil {
		return x.TheaterTypeId
	}
	return 0
}

type AddTheaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTheaterResponse) Reset() {
	*x = AddTheaterResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterResponse) ProtoMessage() {}

func (x *AddTheaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterResponse.ProtoReflect.Descriptor instead.
func (*AddTheaterResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{84}
}

type DeleteTheaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *DeleteTheaterRequest) Reset() {
	*x = DeleteTheaterRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterRequest) ProtoMessage() {}

func (x *DeleteTheaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteTheaterRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type DeleteTheaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTheaterResponse) Reset() {
	*x = DeleteTheaterResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterResponse) ProtoMessage() {}

func (x *DeleteTheaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{86}
}

type DeleteTheaterByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTheaterByNameRequest) Reset() {
	*x = DeleteTheaterByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterByNameRequest) ProtoMessage() {}

func (x *DeleteTheaterByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterByNameRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{87}
}

func (x *DeleteTheaterByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTheaterByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTheaterByNameResponse) Reset() {
	*x = DeleteTheaterByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterByNameResponse) ProtoMessage() {}

func (x *DeleteTheaterByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterByNameResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{88}
}

type GetTheaterByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId int32 `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
}

func (x *GetTheaterByIDRequest) Reset() {
	*x = GetTheaterByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterByIDRequest) ProtoMessage() {}

func (x *GetTheaterByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{89}
}

func (x *GetTheaterByIDRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

type GetTheaterByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater *Theater `protobuf:"bytes,1,opt,name=theater,proto3" json:"theater,omitempty"`
}

func (x *GetTheaterByIDResponse) Reset() {
	*x = GetTheaterByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterByIDResponse) ProtoMessage() {}

func (x *GetTheaterByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{90}
}

func (x *GetTheaterByIDResponse) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

type GetTheaterByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTheaterByNameRequest) Reset() {
	*x = GetTheaterByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterByNameRequest) ProtoMessage() {}

func (x *GetTheaterByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterByNameRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{91}
}

func (x *GetTheaterByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTheaterByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theater []*Theater `protobuf:"bytes,1,rep,name=theater,proto3" json:"theater,omitempty"`
}

func (x *GetTheaterByNameResponse) Reset() {
	*x = GetTheaterByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterByNameResponse) ProtoMessage() {}

func (x *GetTheaterByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterByNameResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{92}
}

func (x *GetTheaterByNameResponse) GetTheater() []*Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

type UpdateTheaterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterId       int32  `protobuf:"varint,1,opt,name=theater_id,json=theaterId,proto3" json:"theater_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Place           string `protobuf:"bytes,3,opt,name=place,proto3" json:"place,omitempty"`
	City            string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	District        string `protobuf:"bytes,5,opt,name=district,proto3" json:"district,omitempty"`
	State           string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	OwnerId         uint32 `protobuf:"varint,7,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	NumberOfScreens int32  `protobuf:"varint,8,opt,name=number_of_screens,json=numberOfScreens,proto3" json:"number_of_screens,omitempty"`
	TheaterTypeId   int32  `protobuf:"varint,9,opt,name=theater_type_id,json=theaterTypeId,proto3" json:"theater_type_id,omitempty"`
}

func (x *UpdateTheaterRequest) Reset() {
	*x = UpdateTheaterRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterRequest) ProtoMessage() {}

func (x *UpdateTheaterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterRequest.ProtoReflect.Descriptor instead.
func (*UpdateTheaterRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateTheaterRequest) GetTheaterId() int32 {
	if x != nil {
		return x.TheaterId
	}
	return 0
}

func (x *UpdateTheaterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTheaterRequest) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *UpdateTheaterRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *UpdateTheaterRequest) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *UpdateTheaterRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UpdateTheaterRequest) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *UpdateTheaterRequest) GetNumberOfScreens() int32 {
	if x != nil {
		return x.NumberOfScreens
	}
	return 0
}

func (x *UpdateTheaterRequest) GetTheaterTypeId() int32 {
	if x != nil {
		return x.TheaterTypeId
	}
	return 0
}

type UpdateTheaterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTheaterResponse) Reset() {
	*x = UpdateTheaterResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterResponse) ProtoMessage() {}

func (x *UpdateTheaterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterResponse.ProtoReflect.Descriptor instead.
func (*UpdateTheaterResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{94}
}

type ListTheatersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTheatersRequest) Reset() {
	*x = ListTheatersRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheatersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheatersRequest) ProtoMessage() {}

func (x *ListTheatersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheatersRequest.ProtoReflect.Descriptor instead.
func (*ListTheatersRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{95}
}

type ListTheatersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theaters []*Theater `protobuf:"bytes,1,rep,name=theaters,proto3" json:"theaters,omitempty"`
}

func (x *ListTheatersResponse) Reset() {
	*x = ListTheatersResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheatersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheatersResponse) ProtoMessage() {}

func (x *ListTheatersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheatersResponse.ProtoReflect.Descriptor instead.
func (*ListTheatersResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{96}
}

func (x *ListTheatersResponse) GetTheaters() []*Theater {
	if x != nil {
		return x.Theaters
	}
	return nil
}

type GetTheatersByAdminIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminId int32 `protobuf:"varint,1,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
}

func (x *GetTheatersByAdminIdRequest) Reset() {
	*x = GetTheatersByAdminIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByAdminIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByAdminIdRequest) ProtoMessage() {}

func (x *GetTheatersByAdminIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByAdminIdRequest.ProtoReflect.Descriptor instead.
func (*GetTheatersByAdminIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{97}
}

func (x *GetTheatersByAdminIdRequest) GetAdminId() int32 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

type GetTheatersByAdminIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Theaters []*Theater `protobuf:"bytes,1,rep,name=theaters,proto3" json:"theaters,omitempty"`
}

func (x *GetTheatersByAdminIdResponse) Reset() {
	*x = GetTheatersByAdminIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheatersByAdminIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheatersByAdminIdResponse) ProtoMessage() {}

func (x *GetTheatersByAdminIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheatersByAdminIdResponse.ProtoReflect.Descriptor instead.
func (*GetTheatersByAdminIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{98}
}

func (x *GetTheatersByAdminIdResponse) GetTheaters() []*Theater {
	if x != nil {
		return x.Theaters
	}
	return nil
}

// Theater types replated messages
type AddTheaterTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterTypeName string `protobuf:"bytes,1,opt,name=theater_type_name,json=theaterTypeName,proto3" json:"theater_type_name,omitempty"`
}

func (x *AddTheaterTypeRequest) Reset() {
	*x = AddTheaterTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterTypeRequest) ProtoMessage() {}

func (x *AddTheaterTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterTypeRequest.ProtoReflect.Descriptor instead.
func (*AddTheaterTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{99}
}

func (x *AddTheaterTypeRequest) GetTheaterTypeName() string {
	if x != nil {
		return x.TheaterTypeName
	}
	return ""
}

type AddTheaterTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddTheaterTypeResponse) Reset() {
	*x = AddTheaterTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterTypeResponse) ProtoMessage() {}

func (x *AddTheaterTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterTypeResponse.ProtoReflect.Descriptor instead.
func (*AddTheaterTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{100}
}

func (x *AddTheaterTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTheaterTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterTypeId int32 `protobuf:"varint,1,opt,name=theater_type_id,json=theaterTypeId,proto3" json:"theater_type_id,omitempty"`
}

func (x *DeleteTheaterTypeRequest) Reset() {
	*x = DeleteTheaterTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterTypeRequest) ProtoMessage() {}

func (x *DeleteTheaterTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{101}
}

func (x *DeleteTheaterTypeRequest) GetTheaterTypeId() int32 {
	if x != nil {
		return x.TheaterTypeId
	}
	return 0
}

type DeleteTheaterTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTheaterTypeResponse) Reset() {
	*x = DeleteTheaterTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterTypeResponse) ProtoMessage() {}

func (x *DeleteTheaterTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{102}
}

func (x *DeleteTheaterTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteTheaterTypeByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteTheaterTypeByNameRequest) Reset() {
	*x = DeleteTheaterTypeByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterTypeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterTypeByNameRequest) ProtoMessage() {}

func (x *DeleteTheaterTypeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterTypeByNameRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterTypeByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{103}
}

func (x *DeleteTheaterTypeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteTheaterTypeByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteTheaterTypeByNameResponse) Reset() {
	*x = DeleteTheaterTypeByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterTypeByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterTypeByNameResponse) ProtoMessage() {}

func (x *DeleteTheaterTypeByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterTypeByNameResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterTypeByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{104}
}

func (x *DeleteTheaterTypeByNameResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTheaterTypeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterTypeId int32 `protobuf:"varint,1,opt,name=theater_type_id,json=theaterTypeId,proto3" json:"theater_type_id,omitempty"`
}

func (x *GetTheaterTypeByIDRequest) Reset() {
	*x = GetTheaterTypeByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterTypeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterTypeByIDRequest) ProtoMessage() {}

func (x *GetTheaterTypeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterTypeByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterTypeByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{105}
}

func (x *GetTheaterTypeByIDRequest) GetTheaterTypeId() int32 {
	if x != nil {
		return x.TheaterTypeId
	}
	return 0
}

type GetTheaterTypeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterType *TheaterType `protobuf:"bytes,1,opt,name=theater_type,json=theaterType,proto3" json:"theater_type,omitempty"`
}

func (x *GetTheaterTypeByIDResponse) Reset() {
	*x = GetTheaterTypeByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterTypeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterTypeByIDResponse) ProtoMessage() {}

func (x *GetTheaterTypeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterTypeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterTypeByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{106}
}

func (x *GetTheaterTypeByIDResponse) GetTheaterType() *TheaterType {
	if x != nil {
		return x.TheaterType
	}
	return nil
}

type TheaterType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TheaterTypeName string `protobuf:"bytes,2,opt,name=theater_type_name,json=theaterTypeName,proto3" json:"theater_type_name,omitempty"`
}

func (x *TheaterType) Reset() {
	*x = TheaterType{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TheaterType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheaterType) ProtoMessage() {}

func (x *TheaterType) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheaterType.ProtoReflect.Descriptor instead.
func (*TheaterType) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{107}
}

func (x *TheaterType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TheaterType) GetTheaterTypeName() string {
	if x != nil {
		return x.TheaterTypeName
	}
	return ""
}

type GetTheaterTypeByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetTheaterTypeByNameRequest) Reset() {
	*x = GetTheaterTypeByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterTypeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterTypeByNameRequest) ProtoMessage() {}

func (x *GetTheaterTypeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterTypeByNameRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterTypeByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{108}
}

func (x *GetTheaterTypeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTheaterTypeBynameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterType *TheaterType `protobuf:"bytes,1,opt,name=theater_type,json=theaterType,proto3" json:"theater_type,omitempty"`
}

func (x *GetTheaterTypeBynameResponse) Reset() {
	*x = GetTheaterTypeBynameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterTypeBynameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterTypeBynameResponse) ProtoMessage() {}

func (x *GetTheaterTypeBynameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterTypeBynameResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterTypeBynameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{109}
}

func (x *GetTheaterTypeBynameResponse) GetTheaterType() *TheaterType {
	if x != nil {
		return x.TheaterType
	}
	return nil
}

type UpdateTheaterTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TheaterTypeName string `protobuf:"bytes,2,opt,name=theater_type_name,json=theaterTypeName,proto3" json:"theater_type_name,omitempty"`
}

func (x *UpdateTheaterTypeRequest) Reset() {
	*x = UpdateTheaterTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterTypeRequest) ProtoMessage() {}

func (x *UpdateTheaterTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateTheaterTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{110}
}

func (x *UpdateTheaterTypeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTheaterTypeRequest) GetTheaterTypeName() string {
	if x != nil {
		return x.TheaterTypeName
	}
	return ""
}

type UpdateTheaterTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateTheaterTypeResponse) Reset() {
	*x = UpdateTheaterTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterTypeResponse) ProtoMessage() {}

func (x *UpdateTheaterTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateTheaterTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{111}
}

func (x *UpdateTheaterTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListTheaterTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTheaterTypesRequest) Reset() {
	*x = ListTheaterTypesRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheaterTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheaterTypesRequest) ProtoMessage() {}

func (x *ListTheaterTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheaterTypesRequest.ProtoReflect.Descriptor instead.
func (*ListTheaterTypesRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{112}
}

type ListTheaterTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterTypes []*TheaterType `protobuf:"bytes,1,rep,name=theater_types,json=theaterTypes,proto3" json:"theater_types,omitempty"`
}

func (x *ListTheaterTypeResponse) Reset() {
	*x = ListTheaterTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheaterTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheaterTypeResponse) ProtoMessage() {}

func (x *ListTheaterTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheaterTypeResponse.ProtoReflect.Descriptor instead.
func (*ListTheaterTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{113}
}

func (x *ListTheaterTypeResponse) GetTheaterTypes() []*TheaterType {
	if x != nil {
		return x.TheaterTypes
	}
	return nil
}

// Screen types related messages
type AddScreenTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenTypeName string `protobuf:"bytes,1,opt,name=screen_type_name,json=screenTypeName,proto3" json:"screen_type_name,omitempty"`
}

func (x *AddScreenTypeRequest) Reset() {
	*x = AddScreenTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScreenTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScreenTypeRequest) ProtoMessage() {}

func (x *AddScreenTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScreenTypeRequest.ProtoReflect.Descriptor instead.
func (*AddScreenTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{114}
}

func (x *AddScreenTypeRequest) GetScreenTypeName() string {
	if x != nil {
		return x.ScreenTypeName
	}
	return ""
}

type AddScreenTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddScreenTypeResponse) Reset() {
	*x = AddScreenTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddScreenTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddScreenTypeResponse) ProtoMessage() {}

func (x *AddScreenTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddScreenTypeResponse.ProtoReflect.Descriptor instead.
func (*AddScreenTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{115}
}

func (x *AddScreenTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteScreenTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenTypeId int32 `protobuf:"varint,1,opt,name=screen_type_id,json=screenTypeId,proto3" json:"screen_type_id,omitempty"`
}

func (x *DeleteScreenTypeRequest) Reset() {
	*x = DeleteScreenTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScreenTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScreenTypeRequest) ProtoMessage() {}

func (x *DeleteScreenTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScreenTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteScreenTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{116}
}

func (x *DeleteScreenTypeRequest) GetScreenTypeId() int32 {
	if x != nil {
		return x.ScreenTypeId
	}
	return 0
}

type DeleteScreenTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteScreenTypeResponse) Reset() {
	*x = DeleteScreenTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScreenTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScreenTypeResponse) ProtoMessage() {}

func (x *DeleteScreenTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScreenTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteScreenTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{117}
}

func (x *DeleteScreenTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteScreenTypeByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteScreenTypeByNameRequest) Reset() {
	*x = DeleteScreenTypeByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScreenTypeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScreenTypeByNameRequest) ProtoMessage() {}

func (x *DeleteScreenTypeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScreenTypeByNameRequest.ProtoReflect.Descriptor instead.
func (*DeleteScreenTypeByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{118}
}

func (x *DeleteScreenTypeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteScreenTypeByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteScreenTypeByNameResponse) Reset() {
	*x = DeleteScreenTypeByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteScreenTypeByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteScreenTypeByNameResponse) ProtoMessage() {}

func (x *DeleteScreenTypeByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteScreenTypeByNameResponse.ProtoReflect.Descriptor instead.
func (*DeleteScreenTypeByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{119}
}

func (x *DeleteScreenTypeByNameResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetScreenTypeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenTypeId int32 `protobuf:"varint,1,opt,name=screen_type_id,json=screenTypeId,proto3" json:"screen_type_id,omitempty"`
}

func (x *GetScreenTypeByIDRequest) Reset() {
	*x = GetScreenTypeByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreenTypeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenTypeByIDRequest) ProtoMessage() {}

func (x *GetScreenTypeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenTypeByIDRequest.ProtoReflect.Descriptor instead.
func (*GetScreenTypeByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{120}
}

func (x *GetScreenTypeByIDRequest) GetScreenTypeId() int32 {
	if x != nil {
		return x.ScreenTypeId
	}
	return 0
}

type GetScreenTypeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenType *ScreenType `protobuf:"bytes,1,opt,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
}

func (x *GetScreenTypeByIDResponse) Reset() {
	*x = GetScreenTypeByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreenTypeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenTypeByIDResponse) ProtoMessage() {}

func (x *GetScreenTypeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenTypeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetScreenTypeByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{121}
}

func (x *GetScreenTypeByIDResponse) GetScreenType() *ScreenType {
	if x != nil {
		return x.ScreenType
	}
	return nil
}

type ScreenType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScreenTypeName string `protobuf:"bytes,2,opt,name=screen_type_name,json=screenTypeName,proto3" json:"screen_type_name,omitempty"`
}

func (x *ScreenType) Reset() {
	*x = ScreenType{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ScreenType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenType) ProtoMessage() {}

func (x *ScreenType) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenType.ProtoReflect.Descriptor instead.
func (*ScreenType) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{122}
}

func (x *ScreenType) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScreenType) GetScreenTypeName() string {
	if x != nil {
		return x.ScreenTypeName
	}
	return ""
}

type GetScreenTypeByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetScreenTypeByNameRequest) Reset() {
	*x = GetScreenTypeByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreenTypeByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenTypeByNameRequest) ProtoMessage() {}

func (x *GetScreenTypeByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenTypeByNameRequest.ProtoReflect.Descriptor instead.
func (*GetScreenTypeByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{123}
}

func (x *GetScreenTypeByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetScreenTypeByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenType *ScreenType `protobuf:"bytes,1,opt,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
}

func (x *GetScreenTypeByNameResponse) Reset() {
	*x = GetScreenTypeByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetScreenTypeByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenTypeByNameResponse) ProtoMessage() {}

func (x *GetScreenTypeByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenTypeByNameResponse.ProtoReflect.Descriptor instead.
func (*GetScreenTypeByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{124}
}

func (x *GetScreenTypeByNameResponse) GetScreenType() *ScreenType {
	if x != nil {
		return x.ScreenType
	}
	return nil
}

type UpdateScreenTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ScreenTypeName string `protobuf:"bytes,2,opt,name=screen_type_name,json=screenTypeName,proto3" json:"screen_type_name,omitempty"`
}

func (x *UpdateScreenTypeRequest) Reset() {
	*x = UpdateScreenTypeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScreenTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScreenTypeRequest) ProtoMessage() {}

func (x *UpdateScreenTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScreenTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateScreenTypeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{125}
}

func (x *UpdateScreenTypeRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateScreenTypeRequest) GetScreenTypeName() string {
	if x != nil {
		return x.ScreenTypeName
	}
	return ""
}

type UpdateScreenTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateScreenTypeResponse) Reset() {
	*x = UpdateScreenTypeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateScreenTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateScreenTypeResponse) ProtoMessage() {}

func (x *UpdateScreenTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateScreenTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateScreenTypeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{126}
}

func (x *UpdateScreenTypeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListScreenTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListScreenTypesRequest) Reset() {
	*x = ListScreenTypesRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScreenTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScreenTypesRequest) ProtoMessage() {}

func (x *ListScreenTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScreenTypesRequest.ProtoReflect.Descriptor instead.
func (*ListScreenTypesRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{127}
}

type ListScreenTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScreenTypes []*ScreenType `protobuf:"bytes,1,rep,name=screen_types,json=screenTypes,proto3" json:"screen_types,omitempty"`
}

func (x *ListScreenTypesResponse) Reset() {
	*x = ListScreenTypesResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListScreenTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScreenTypesResponse) ProtoMessage() {}

func (x *ListScreenTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScreenTypesResponse.ProtoReflect.Descriptor instead.
func (*ListScreenTypesResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{128}
}

func (x *ListScreenTypesResponse) GetScreenTypes() []*ScreenType {
	if x != nil {
		return x.ScreenTypes
	}
	return nil
}

// seat category related messages
type SeatCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SeatCategoryName string `protobuf:"bytes,2,opt,name=seat_category_name,json=seatCategoryName,proto3" json:"seat_category_name,omitempty"`
}

func (x *SeatCategory) Reset() {
	*x = SeatCategory{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeatCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatCategory) ProtoMessage() {}

func (x *SeatCategory) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatCategory.ProtoReflect.Descriptor instead.
func (*SeatCategory) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{129}
}

func (x *SeatCategory) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SeatCategory) GetSeatCategoryName() string {
	if x != nil {
		return x.SeatCategoryName
	}
	return ""
}

type AddSeatCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategory *SeatCategory `protobuf:"bytes,1,opt,name=seat_category,json=seatCategory,proto3" json:"seat_category,omitempty"`
}

func (x *AddSeatCategoryRequest) Reset() {
	*x = AddSeatCategoryRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSeatCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeatCategoryRequest) ProtoMessage() {}

func (x *AddSeatCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeatCategoryRequest.ProtoReflect.Descriptor instead.
func (*AddSeatCategoryRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{130}
}

func (x *AddSeatCategoryRequest) GetSeatCategory() *SeatCategory {
	if x != nil {
		return x.SeatCategory
	}
	return nil
}

type AddSeatCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AddSeatCategoryResponse) Reset() {
	*x = AddSeatCategoryResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddSeatCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSeatCategoryResponse) ProtoMessage() {}

func (x *AddSeatCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSeatCategoryResponse.ProtoReflect.Descriptor instead.
func (*AddSeatCategoryResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{131}
}

func (x *AddSeatCategoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteSeatCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategoryId int32 `protobuf:"varint,1,opt,name=seat_category_id,json=seatCategoryId,proto3" json:"seat_category_id,omitempty"`
}

func (x *DeleteSeatCategoryRequest) Reset() {
	*x = DeleteSeatCategoryRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatCategoryRequest) ProtoMessage() {}

func (x *DeleteSeatCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatCategoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeatCategoryRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{132}
}

func (x *DeleteSeatCategoryRequest) GetSeatCategoryId() int32 {
	if x != nil {
		return x.SeatCategoryId
	}
	return 0
}

type DeleteSeatCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteSeatCategoryResponse) Reset() {
	*x = DeleteSeatCategoryResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatCategoryResponse) ProtoMessage() {}

func (x *DeleteSeatCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatCategoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteSeatCategoryResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{133}
}

func (x *DeleteSeatCategoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteSeatCategoryByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeleteSeatCategoryByNameRequest) Reset() {
	*x = DeleteSeatCategoryByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatCategoryByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatCategoryByNameRequest) ProtoMessage() {}

func (x *DeleteSeatCategoryByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatCategoryByNameRequest.ProtoReflect.Descriptor instead.
func (*DeleteSeatCategoryByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{134}
}

func (x *DeleteSeatCategoryByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeleteSeatCategoryByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteSeatCategoryByNameResponse) Reset() {
	*x = DeleteSeatCategoryByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSeatCategoryByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSeatCategoryByNameResponse) ProtoMessage() {}

func (x *DeleteSeatCategoryByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSeatCategoryByNameResponse.ProtoReflect.Descriptor instead.
func (*DeleteSeatCategoryByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{135}
}

func (x *DeleteSeatCategoryByNameResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetSeatCategoryByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategoryId int32 `protobuf:"varint,1,opt,name=seat_category_id,json=seatCategoryId,proto3" json:"seat_category_id,omitempty"`
}

func (x *GetSeatCategoryByIDRequest) Reset() {
	*x = GetSeatCategoryByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatCategoryByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatCategoryByIDRequest) ProtoMessage() {}

func (x *GetSeatCategoryByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatCategoryByIDRequest.ProtoReflect.Descriptor instead.
func (*GetSeatCategoryByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{136}
}

func (x *GetSeatCategoryByIDRequest) GetSeatCategoryId() int32 {
	if x != nil {
		return x.SeatCategoryId
	}
	return 0
}

type GetSeatCategoryByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategory *SeatCategory `protobuf:"bytes,1,opt,name=seat_category,json=seatCategory,proto3" json:"seat_category,omitempty"`
}

func (x *GetSeatCategoryByIDResponse) Reset() {
	*x = GetSeatCategoryByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatCategoryByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatCategoryByIDResponse) ProtoMessage() {}

func (x *GetSeatCategoryByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatCategoryByIDResponse.ProtoReflect.Descriptor instead.
func (*GetSeatCategoryByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{137}
}

func (x *GetSeatCategoryByIDResponse) GetSeatCategory() *SeatCategory {
	if x != nil {
		return x.SeatCategory
	}
	return nil
}

type GetSeatCategoryByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSeatCategoryByNameRequest) Reset() {
	*x = GetSeatCategoryByNameRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatCategoryByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatCategoryByNameRequest) ProtoMessage() {}

func (x *GetSeatCategoryByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatCategoryByNameRequest.ProtoReflect.Descriptor instead.
func (*GetSeatCategoryByNameRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{138}
}

func (x *GetSeatCategoryByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetSeatCategoryByNameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategory *SeatCategory `protobuf:"bytes,1,opt,name=seat_category,json=seatCategory,proto3" json:"seat_category,omitempty"`
}

func (x *GetSeatCategoryByNameResponse) Reset() {
	*x = GetSeatCategoryByNameResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSeatCategoryByNameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSeatCategoryByNameResponse) ProtoMessage() {}

func (x *GetSeatCategoryByNameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSeatCategoryByNameResponse.ProtoReflect.Descriptor instead.
func (*GetSeatCategoryByNameResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{139}
}

func (x *GetSeatCategoryByNameResponse) GetSeatCategory() *SeatCategory {
	if x != nil {
		return x.SeatCategory
	}
	return nil
}

type UpdateSeatCategoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SeatCategory *SeatCategory `protobuf:"bytes,2,opt,name=seat_category,json=seatCategory,proto3" json:"seat_category,omitempty"`
}

func (x *UpdateSeatCategoryRequest) Reset() {
	*x = UpdateSeatCategoryRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSeatCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatCategoryRequest) ProtoMessage() {}

func (x *UpdateSeatCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatCategoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateSeatCategoryRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{140}
}

func (x *UpdateSeatCategoryRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSeatCategoryRequest) GetSeatCategory() *SeatCategory {
	if x != nil {
		return x.SeatCategory
	}
	return nil
}

type UpdateSeatCategoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateSeatCategoryResponse) Reset() {
	*x = UpdateSeatCategoryResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSeatCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSeatCategoryResponse) ProtoMessage() {}

func (x *UpdateSeatCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSeatCategoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateSeatCategoryResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{141}
}

func (x *UpdateSeatCategoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ListSeatCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSeatCategoriesRequest) Reset() {
	*x = ListSeatCategoriesRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSeatCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatCategoriesRequest) ProtoMessage() {}

func (x *ListSeatCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatCategoriesRequest.ProtoReflect.Descriptor instead.
func (*ListSeatCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{142}
}

type ListSeatCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCategories []*SeatCategory `protobuf:"bytes,1,rep,name=seat_categories,json=seatCategories,proto3" json:"seat_categories,omitempty"`
}

func (x *ListSeatCategoriesResponse) Reset() {
	*x = ListSeatCategoriesResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSeatCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSeatCategoriesResponse) ProtoMessage() {}

func (x *ListSeatCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSeatCategoriesResponse.ProtoReflect.Descriptor instead.
func (*ListSeatCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{143}
}

func (x *ListSeatCategoriesResponse) GetSeatCategories() []*SeatCategory {
	if x != nil {
		return x.SeatCategories
	}
	return nil
}

// Theater screen
type TheaterScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TheaterID    int32       `protobuf:"varint,2,opt,name=TheaterID,proto3" json:"TheaterID,omitempty"`
	ScreenNumber int32       `protobuf:"varint,3,opt,name=ScreenNumber,proto3" json:"ScreenNumber,omitempty"`
	SeatCapacity int32       `protobuf:"varint,4,opt,name=SeatCapacity,proto3" json:"SeatCapacity,omitempty"`
	ScreenTypeID int32       `protobuf:"varint,5,opt,name=ScreenTypeID,proto3" json:"ScreenTypeID,omitempty"`
	Theater      *Theater    `protobuf:"bytes,6,opt,name=theater,proto3" json:"theater,omitempty"`
	ScreenType   *ScreenType `protobuf:"bytes,7,opt,name=screen_type,json=screenType,proto3" json:"screen_type,omitempty"`
}

func (x *TheaterScreen) Reset() {
	*x = TheaterScreen{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TheaterScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TheaterScreen) ProtoMessage() {}

func (x *TheaterScreen) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TheaterScreen.ProtoReflect.Descriptor instead.
func (*TheaterScreen) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{144}
}

func (x *TheaterScreen) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TheaterScreen) GetTheaterID() int32 {
	if x != nil {
		return x.TheaterID
	}
	return 0
}

func (x *TheaterScreen) GetScreenNumber() int32 {
	if x != nil {
		return x.ScreenNumber
	}
	return 0
}

func (x *TheaterScreen) GetSeatCapacity() int32 {
	if x != nil {
		return x.SeatCapacity
	}
	return 0
}

func (x *TheaterScreen) GetScreenTypeID() int32 {
	if x != nil {
		return x.ScreenTypeID
	}
	return 0
}

func (x *TheaterScreen) GetTheater() *Theater {
	if x != nil {
		return x.Theater
	}
	return nil
}

func (x *TheaterScreen) GetScreenType() *ScreenType {
	if x != nil {
		return x.ScreenType
	}
	return nil
}

type AddTheaterScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId       int32          `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	TheaterScreen *TheaterScreen `protobuf:"bytes,2,opt,name=TheaterScreen,proto3" json:"TheaterScreen,omitempty"`
}

func (x *AddTheaterScreenRequest) Reset() {
	*x = AddTheaterScreenRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterScreenRequest) ProtoMessage() {}

func (x *AddTheaterScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterScreenRequest.ProtoReflect.Descriptor instead.
func (*AddTheaterScreenRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{145}
}

func (x *AddTheaterScreenRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *AddTheaterScreenRequest) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type AddTheaterScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTheaterScreenResponse) Reset() {
	*x = AddTheaterScreenResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddTheaterScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTheaterScreenResponse) ProtoMessage() {}

func (x *AddTheaterScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTheaterScreenResponse.ProtoReflect.Descriptor instead.
func (*AddTheaterScreenResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{146}
}

type DeleteTheaterScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterScreenId int32 `protobuf:"varint,1,opt,name=TheaterScreenId,proto3" json:"TheaterScreenId,omitempty"`
}

func (x *DeleteTheaterScreenRequest) Reset() {
	*x = DeleteTheaterScreenRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterScreenRequest) ProtoMessage() {}

func (x *DeleteTheaterScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterScreenRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterScreenRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{147}
}

func (x *DeleteTheaterScreenRequest) GetTheaterScreenId() int32 {
	if x != nil {
		return x.TheaterScreenId
	}
	return 0
}

type DeleteTheaterScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTheaterScreenResponse) Reset() {
	*x = DeleteTheaterScreenResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterScreenResponse) ProtoMessage() {}

func (x *DeleteTheaterScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterScreenResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterScreenResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{148}
}

type DeleteTheaterScreenByNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterID    int32 `protobuf:"varint,1,opt,name=TheaterID,proto3" json:"TheaterID,omitempty"`
	ScreenNumber int32 `protobuf:"varint,2,opt,name=ScreenNumber,proto3" json:"ScreenNumber,omitempty"`
}

func (x *DeleteTheaterScreenByNumberRequest) Reset() {
	*x = DeleteTheaterScreenByNumberRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterScreenByNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterScreenByNumberRequest) ProtoMessage() {}

func (x *DeleteTheaterScreenByNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterScreenByNumberRequest.ProtoReflect.Descriptor instead.
func (*DeleteTheaterScreenByNumberRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{149}
}

func (x *DeleteTheaterScreenByNumberRequest) GetTheaterID() int32 {
	if x != nil {
		return x.TheaterID
	}
	return 0
}

func (x *DeleteTheaterScreenByNumberRequest) GetScreenNumber() int32 {
	if x != nil {
		return x.ScreenNumber
	}
	return 0
}

type DeleteTheaterScreenByNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTheaterScreenByNumberResponse) Reset() {
	*x = DeleteTheaterScreenByNumberResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTheaterScreenByNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTheaterScreenByNumberResponse) ProtoMessage() {}

func (x *DeleteTheaterScreenByNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTheaterScreenByNumberResponse.ProtoReflect.Descriptor instead.
func (*DeleteTheaterScreenByNumberResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{150}
}

type GetTheaterScreenByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterScreenId int32 `protobuf:"varint,1,opt,name=TheaterScreenId,proto3" json:"TheaterScreenId,omitempty"`
}

func (x *GetTheaterScreenByIDRequest) Reset() {
	*x = GetTheaterScreenByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterScreenByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterScreenByIDRequest) ProtoMessage() {}

func (x *GetTheaterScreenByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterScreenByIDRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterScreenByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{151}
}

func (x *GetTheaterScreenByIDRequest) GetTheaterScreenId() int32 {
	if x != nil {
		return x.TheaterScreenId
	}
	return 0
}

type GetTheaterScreenByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterScreen *TheaterScreen `protobuf:"bytes,1,opt,name=TheaterScreen,proto3" json:"TheaterScreen,omitempty"`
}

func (x *GetTheaterScreenByIDResponse) Reset() {
	*x = GetTheaterScreenByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterScreenByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterScreenByIDResponse) ProtoMessage() {}

func (x *GetTheaterScreenByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterScreenByIDResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterScreenByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{152}
}

func (x *GetTheaterScreenByIDResponse) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type GetTheaterScreenByNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterID    int32 `protobuf:"varint,1,opt,name=TheaterID,proto3" json:"TheaterID,omitempty"`
	ScreenNumber int32 `protobuf:"varint,2,opt,name=ScreenNumber,proto3" json:"ScreenNumber,omitempty"`
}

func (x *GetTheaterScreenByNumberRequest) Reset() {
	*x = GetTheaterScreenByNumberRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterScreenByNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterScreenByNumberRequest) ProtoMessage() {}

func (x *GetTheaterScreenByNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterScreenByNumberRequest.ProtoReflect.Descriptor instead.
func (*GetTheaterScreenByNumberRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{153}
}

func (x *GetTheaterScreenByNumberRequest) GetTheaterID() int32 {
	if x != nil {
		return x.TheaterID
	}
	return 0
}

func (x *GetTheaterScreenByNumberRequest) GetScreenNumber() int32 {
	if x != nil {
		return x.ScreenNumber
	}
	return 0
}

type GetTheaterScreenByNumberResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterScreen *TheaterScreen `protobuf:"bytes,1,opt,name=TheaterScreen,proto3" json:"TheaterScreen,omitempty"`
}

func (x *GetTheaterScreenByNumberResponse) Reset() {
	*x = GetTheaterScreenByNumberResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTheaterScreenByNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTheaterScreenByNumberResponse) ProtoMessage() {}

func (x *GetTheaterScreenByNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTheaterScreenByNumberResponse.ProtoReflect.Descriptor instead.
func (*GetTheaterScreenByNumberResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{154}
}

func (x *GetTheaterScreenByNumberResponse) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type UpdateTheaterScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId       int32          `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	TheaterScreen *TheaterScreen `protobuf:"bytes,2,opt,name=TheaterScreen,proto3" json:"TheaterScreen,omitempty"`
}

func (x *UpdateTheaterScreenRequest) Reset() {
	*x = UpdateTheaterScreenRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterScreenRequest) ProtoMessage() {}

func (x *UpdateTheaterScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterScreenRequest.ProtoReflect.Descriptor instead.
func (*UpdateTheaterScreenRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{155}
}

func (x *UpdateTheaterScreenRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *UpdateTheaterScreenRequest) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type UpdateTheaterScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTheaterScreenResponse) Reset() {
	*x = UpdateTheaterScreenResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTheaterScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTheaterScreenResponse) ProtoMessage() {}

func (x *UpdateTheaterScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTheaterScreenResponse.ProtoReflect.Descriptor instead.
func (*UpdateTheaterScreenResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{156}
}

type ListTheaterScreensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterID int32 `protobuf:"varint,1,opt,name=TheaterID,proto3" json:"TheaterID,omitempty"`
}

func (x *ListTheaterScreensRequest) Reset() {
	*x = ListTheaterScreensRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheaterScreensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheaterScreensRequest) ProtoMessage() {}

func (x *ListTheaterScreensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheaterScreensRequest.ProtoReflect.Descriptor instead.
func (*ListTheaterScreensRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{157}
}

func (x *ListTheaterScreensRequest) GetTheaterID() int32 {
	if x != nil {
		return x.TheaterID
	}
	return 0
}

type ListTheaterScreensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TheaterScreens []*TheaterScreen `protobuf:"bytes,1,rep,name=TheaterScreens,proto3" json:"TheaterScreens,omitempty"`
}

func (x *ListTheaterScreensResponse) Reset() {
	*x = ListTheaterScreensResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTheaterScreensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTheaterScreensResponse) ProtoMessage() {}

func (x *ListTheaterScreensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTheaterScreensResponse.ProtoReflect.Descriptor instead.
func (*ListTheaterScreensResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{158}
}

func (x *ListTheaterScreensResponse) GetTheaterScreens() []*TheaterScreen {
	if x != nil {
		return x.TheaterScreens
	}
	return nil
}

// Show time related messages
type Showtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MovieId       int32                `protobuf:"varint,2,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	ScreenId      int32                `protobuf:"varint,3,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	ShowDate      *timestamp.Timestamp `protobuf:"bytes,4,opt,name=show_date,json=showDate,proto3" json:"show_date,omitempty"`
	ShowTime      *timestamp.Timestamp `protobuf:"bytes,5,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
	Movie         *Movie               `protobuf:"bytes,6,opt,name=movie,proto3" json:"movie,omitempty"`
	TheaterScreen *TheaterScreen       `protobuf:"bytes,7,opt,name=theater_screen,json=theaterScreen,proto3" json:"theater_screen,omitempty"`
}

func (x *Showtime) Reset() {
	*x = Showtime{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Showtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Showtime) ProtoMessage() {}

func (x *Showtime) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Showtime.ProtoReflect.Descriptor instead.
func (*Showtime) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{159}
}

func (x *Showtime) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Showtime) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *Showtime) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

func (x *Showtime) GetShowDate() *timestamp.Timestamp {
	if x != nil {
		return x.ShowDate
	}
	return nil
}

func (x *Showtime) GetShowTime() *timestamp.Timestamp {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

func (x *Showtime) GetMovie() *Movie {
	if x != nil {
		return x.Movie
	}
	return nil
}

func (x *Showtime) GetTheaterScreen() *TheaterScreen {
	if x != nil {
		return x.TheaterScreen
	}
	return nil
}

type AddShowtimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId  int32     `protobuf:"varint,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Showtime *Showtime `protobuf:"bytes,2,opt,name=showtime,proto3" json:"showtime,omitempty"`
}

func (x *AddShowtimeRequest) Reset() {
	*x = AddShowtimeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddShowtimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShowtimeRequest) ProtoMessage() {}

func (x *AddShowtimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShowtimeRequest.ProtoReflect.Descriptor instead.
func (*AddShowtimeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{160}
}

func (x *AddShowtimeRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *AddShowtimeRequest) GetShowtime() *Showtime {
	if x != nil {
		return x.Showtime
	}
	return nil
}

type AddShowtimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddShowtimeResponse) Reset() {
	*x = AddShowtimeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddShowtimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddShowtimeResponse) ProtoMessage() {}

func (x *AddShowtimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddShowtimeResponse.ProtoReflect.Descriptor instead.
func (*AddShowtimeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{161}
}

type DeleteShowtimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowtimeId int32 `protobuf:"varint,1,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
}

func (x *DeleteShowtimeRequest) Reset() {
	*x = DeleteShowtimeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShowtimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShowtimeRequest) ProtoMessage() {}

func (x *DeleteShowtimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShowtimeRequest.ProtoReflect.Descriptor instead.
func (*DeleteShowtimeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{162}
}

func (x *DeleteShowtimeRequest) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

type DeleteShowtimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteShowtimeResponse) Reset() {
	*x = DeleteShowtimeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShowtimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShowtimeResponse) ProtoMessage() {}

func (x *DeleteShowtimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShowtimeResponse.ProtoReflect.Descriptor instead.
func (*DeleteShowtimeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{163}
}

type DeleteShowtimeByDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId  int32                `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	ScreenId int32                `protobuf:"varint,2,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	ShowDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=show_date,json=showDate,proto3" json:"show_date,omitempty"`
	ShowTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
}

func (x *DeleteShowtimeByDetailsRequest) Reset() {
	*x = DeleteShowtimeByDetailsRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShowtimeByDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShowtimeByDetailsRequest) ProtoMessage() {}

func (x *DeleteShowtimeByDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShowtimeByDetailsRequest.ProtoReflect.Descriptor instead.
func (*DeleteShowtimeByDetailsRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{164}
}

func (x *DeleteShowtimeByDetailsRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *DeleteShowtimeByDetailsRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

func (x *DeleteShowtimeByDetailsRequest) GetShowDate() *timestamp.Timestamp {
	if x != nil {
		return x.ShowDate
	}
	return nil
}

func (x *DeleteShowtimeByDetailsRequest) GetShowTime() *timestamp.Timestamp {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

type DeleteShowtimeByDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteShowtimeByDetailsResponse) Reset() {
	*x = DeleteShowtimeByDetailsResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteShowtimeByDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShowtimeByDetailsResponse) ProtoMessage() {}

func (x *DeleteShowtimeByDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShowtimeByDetailsResponse.ProtoReflect.Descriptor instead.
func (*DeleteShowtimeByDetailsResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{165}
}

type GetShowtimeByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowtimeId int32 `protobuf:"varint,1,opt,name=showtime_id,json=showtimeId,proto3" json:"showtime_id,omitempty"`
}

func (x *GetShowtimeByIDRequest) Reset() {
	*x = GetShowtimeByIDRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShowtimeByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShowtimeByIDRequest) ProtoMessage() {}

func (x *GetShowtimeByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShowtimeByIDRequest.ProtoReflect.Descriptor instead.
func (*GetShowtimeByIDRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{166}
}

func (x *GetShowtimeByIDRequest) GetShowtimeId() int32 {
	if x != nil {
		return x.ShowtimeId
	}
	return 0
}

type GetShowtimeByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showtime *Showtime `protobuf:"bytes,1,opt,name=showtime,proto3" json:"showtime,omitempty"`
}

func (x *GetShowtimeByIDResponse) Reset() {
	*x = GetShowtimeByIDResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShowtimeByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShowtimeByIDResponse) ProtoMessage() {}

func (x *GetShowtimeByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShowtimeByIDResponse.ProtoReflect.Descriptor instead.
func (*GetShowtimeByIDResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{167}
}

func (x *GetShowtimeByIDResponse) GetShowtime() *Showtime {
	if x != nil {
		return x.Showtime
	}
	return nil
}

type GetShowtimeByDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId  int32                `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
	ScreenId int32                `protobuf:"varint,2,opt,name=screen_id,json=screenId,proto3" json:"screen_id,omitempty"`
	ShowDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=show_date,json=showDate,proto3" json:"show_date,omitempty"`
	ShowTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=show_time,json=showTime,proto3" json:"show_time,omitempty"`
}

func (x *GetShowtimeByDetailsRequest) Reset() {
	*x = GetShowtimeByDetailsRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShowtimeByDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShowtimeByDetailsRequest) ProtoMessage() {}

func (x *GetShowtimeByDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShowtimeByDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetShowtimeByDetailsRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{168}
}

func (x *GetShowtimeByDetailsRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

func (x *GetShowtimeByDetailsRequest) GetScreenId() int32 {
	if x != nil {
		return x.ScreenId
	}
	return 0
}

func (x *GetShowtimeByDetailsRequest) GetShowDate() *timestamp.Timestamp {
	if x != nil {
		return x.ShowDate
	}
	return nil
}

func (x *GetShowtimeByDetailsRequest) GetShowTime() *timestamp.Timestamp {
	if x != nil {
		return x.ShowTime
	}
	return nil
}

type GetShowtimeByDetailsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showtime *Showtime `protobuf:"bytes,1,opt,name=showtime,proto3" json:"showtime,omitempty"`
}

func (x *GetShowtimeByDetailsResponse) Reset() {
	*x = GetShowtimeByDetailsResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetShowtimeByDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShowtimeByDetailsResponse) ProtoMessage() {}

func (x *GetShowtimeByDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShowtimeByDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetShowtimeByDetailsResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{169}
}

func (x *GetShowtimeByDetailsResponse) GetShowtime() *Showtime {
	if x != nil {
		return x.Showtime
	}
	return nil
}

type UpdateShowtimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showtime *Showtime `protobuf:"bytes,1,opt,name=showtime,proto3" json:"showtime,omitempty"`
	OwnerId  int32     `protobuf:"varint,2,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
}

func (x *UpdateShowtimeRequest) Reset() {
	*x = UpdateShowtimeRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShowtimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShowtimeRequest) ProtoMessage() {}

func (x *UpdateShowtimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShowtimeRequest.ProtoReflect.Descriptor instead.
func (*UpdateShowtimeRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{170}
}

func (x *UpdateShowtimeRequest) GetShowtime() *Showtime {
	if x != nil {
		return x.Showtime
	}
	return nil
}

func (x *UpdateShowtimeRequest) GetOwnerId() int32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

type UpdateShowtimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateShowtimeResponse) Reset() {
	*x = UpdateShowtimeResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateShowtimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateShowtimeResponse) ProtoMessage() {}

func (x *UpdateShowtimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateShowtimeResponse.ProtoReflect.Descriptor instead.
func (*UpdateShowtimeResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{171}
}

type ListShowtimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MovieId int32 `protobuf:"varint,1,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *ListShowtimesRequest) Reset() {
	*x = ListShowtimesRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowtimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowtimesRequest) ProtoMessage() {}

func (x *ListShowtimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowtimesRequest.ProtoReflect.Descriptor instead.
func (*ListShowtimesRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{172}
}

func (x *ListShowtimesRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type ListShowtimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showtimes []*Showtime `protobuf:"bytes,1,rep,name=showtimes,proto3" json:"showtimes,omitempty"`
}

func (x *ListShowtimesResponse) Reset() {
	*x = ListShowtimesResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowtimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowtimesResponse) ProtoMessage() {}

func (x *ListShowtimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowtimesResponse.ProtoReflect.Descriptor instead.
func (*ListShowtimesResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{173}
}

func (x *ListShowtimesResponse) GetShowtimes() []*Showtime {
	if x != nil {
		return x.Showtimes
	}
	return nil
}

type ListShowtimesByShowDateAndMovieIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShowDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=show_date,json=showDate,proto3" json:"show_date,omitempty"`
	MovieId  int32                `protobuf:"varint,2,opt,name=movie_id,json=movieId,proto3" json:"movie_id,omitempty"`
}

func (x *ListShowtimesByShowDateAndMovieIdRequest) Reset() {
	*x = ListShowtimesByShowDateAndMovieIdRequest{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowtimesByShowDateAndMovieIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowtimesByShowDateAndMovieIdRequest) ProtoMessage() {}

func (x *ListShowtimesByShowDateAndMovieIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowtimesByShowDateAndMovieIdRequest.ProtoReflect.Descriptor instead.
func (*ListShowtimesByShowDateAndMovieIdRequest) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{174}
}

func (x *ListShowtimesByShowDateAndMovieIdRequest) GetShowDate() *timestamp.Timestamp {
	if x != nil {
		return x.ShowDate
	}
	return nil
}

func (x *ListShowtimesByShowDateAndMovieIdRequest) GetMovieId() int32 {
	if x != nil {
		return x.MovieId
	}
	return 0
}

type ListShowtimesByShowDateAndMovieIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Showtimes []*Showtime `protobuf:"bytes,1,rep,name=showtimes,proto3" json:"showtimes,omitempty"`
}

func (x *ListShowtimesByShowDateAndMovieIdResponse) Reset() {
	*x = ListShowtimesByShowDateAndMovieIdResponse{}
	mi := &file_movie_booking_movie_booking_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListShowtimesByShowDateAndMovieIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListShowtimesByShowDateAndMovieIdResponse) ProtoMessage() {}

func (x *ListShowtimesByShowDateAndMovieIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_movie_booking_movie_booking_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListShowtimesByShowDateAndMovieIdResponse.ProtoReflect.Descriptor instead.
func (*ListShowtimesByShowDateAndMovieIdResponse) Descriptor() ([]byte, []int) {
	return file_movie_booking_movie_booking_proto_rawDescGZIP(), []int{175}
}

func (x *ListShowtimesByShowDateAndMovieIdResponse) GetShowtimes() []*Showtime {
	if x != nil {
		return x.Showtimes
	}
	return nil
}

var File_movie_booking_movie_booking_proto protoreflect.FileDescriptor

var file_movie_booking_movie_booking_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x61, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x61, 0x74, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x22, 0x45, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x61, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x73, 0x22,
	0x62, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x34, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x1a,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x39, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5e, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x42, 0x0a, 0x26, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0c,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x4e, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x2f, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x22, 0x45,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x38, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x48, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x4c, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x64, 0x22, 0x4f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x22, 0x4d, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x22, 0xe8, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0d, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x87, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x28, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0xbc, 0x01,
	0x0a, 0x29, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdd, 0x02, 0x0a,
	0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0d, 0x74, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0d, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xe6, 0x01, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x6f, 0x77, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x11, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x17, 0x52, 0x6f, 0x77, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x65, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x50, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x53, 0x65, 0x61, 0x74, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x65, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x04, 0x73, 0x65, 0x61, 0x74, 0x22,
	0x2d, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x38,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x52, 0x05, 0x73, 0x65, 0x61, 0x74, 0x73,
	0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a,
	0x29, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61,
	0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08,
	0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x44, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x43, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x68, 0x0a, 0x2c,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6b, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x74, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x95,
	0x01, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x6b, 0x0a, 0x2f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4c, 0x0a, 0x30, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01,
	0x0a, 0x3c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x3d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xd7, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x4c,
	0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf0, 0x01, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22,
	0x2f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x44, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x41, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x22,
	0x33, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x22, 0x2f, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc5, 0x02, 0x0a,
	0x07, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0xf2, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f,
	0x6f, 0x66, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x36, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x22,
	0x94, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x08, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x08, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x38, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x52, 0x08, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x22, 0x43,
	0x0a, 0x15, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x34, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a, 0x0b, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x56, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x35, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x15, 0x41, 0x64, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x40, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x46,
	0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22,
	0x4c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x59, 0x0a,
	0x16, 0x41, 0x64, 0x64, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x45, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x60, 0x0a,
	0x1d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0x6c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x0d,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0c, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x36, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x61, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a,
	0x17, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x22, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x25, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49,
	0x64, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x22, 0x63, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x0d, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x22, 0x7a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0d, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0x1d, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x19, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x0e, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x22, 0xb3, 0x02, 0x0a, 0x08, 0x53, 0x68,
	0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x52, 0x05, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x74,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x52, 0x0d, 0x74, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22,
	0x63, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x39, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x08, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x52, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x73,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x14, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x7e, 0x0a, 0x28, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x29, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x32, 0xef,
	0x06, 0x0a, 0x0c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x28, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73, 0x42, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x73,
	0x42, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xff, 0x3b, 0x0a, 0x0e, 0x54, 0x68, 0x65, 0x61, 0x74, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x68, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x79, 0x49, 0x44, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x26, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x64, 0x64, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x12, 0x28, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x22, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42,
	0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x61, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x12, 0x28,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44,
	0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x53, 0x68,
	0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x79, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x58, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x21, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68,
	0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44,
	0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x53,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x42, 0x79, 0x53, 0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x61, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7c, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x30, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x3b,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69,
	0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x40, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x65, 0x74, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x12, 0x29, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0xa9, 0x01, 0x0a, 0x28, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3d, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xd0,
	0x01, 0x0a, 0x35, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x41,
	0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68,
	0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x4a, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64,
	0x41, 0x6e, 0x64, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73,
	0x12, 0x20, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74,
	0x73, 0x42, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x27, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x61, 0x74, 0x73, 0x42, 0x79, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x73, 0x42, 0x79, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x20, 0x2e,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79,
	0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x61,
	0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01,
	0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65,
	0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x49, 0x44, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53,
	0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x61, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x43, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x26, 0x47,
	0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76,
	0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x42, 0x79, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x79, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0xa0, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x41,
	0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3a, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x41, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x53, 0x63, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c,
	0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d,
	0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x94, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x44, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49,
	0x44, 0x12, 0x36, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54,
	0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64, 0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x6f,
	0x77, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x79, 0x54, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x61, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xab, 0x04, 0x0a, 0x0e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x23, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6d, 0x6f,
	0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49,
	0x44, 0x12, 0x26, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x6f, 0x76, 0x69,
	0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x33, 0x2e, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x6f, 0x76,
	0x69, 0x65, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x42,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_movie_booking_movie_booking_proto_rawDescOnce sync.Once
	file_movie_booking_movie_booking_proto_rawDescData = file_movie_booking_movie_booking_proto_rawDesc
)

func file_movie_booking_movie_booking_proto_rawDescGZIP() []byte {
	file_movie_booking_movie_booking_proto_rawDescOnce.Do(func() {
		file_movie_booking_movie_booking_proto_rawDescData = protoimpl.X.CompressGZIP(file_movie_booking_movie_booking_proto_rawDescData)
	})
	return file_movie_booking_movie_booking_proto_rawDescData
}

var file_movie_booking_movie_booking_proto_msgTypes = make([]protoimpl.MessageInfo, 176)
var file_movie_booking_movie_booking_proto_goTypes = []any{
	(*Booking)(nil),                                        // 0: moviebooking.Booking
	(*BookingSeat)(nil),                                    // 1: moviebooking.BookingSeat
	(*CreateBookingRequest)(nil),                           // 2: moviebooking.CreateBookingRequest
	(*CreateBookingResponse)(nil),                          // 3: moviebooking.CreateBookingResponse
	(*GetBookingByIDRequest)(nil),                          // 4: moviebooking.GetBookingByIDRequest
	(*GetBookingByIDResponse)(nil),                         // 5: moviebooking.GetBookingByIDResponse
	(*ListBookingsByUserRequest)(nil),                      // 6: moviebooking.ListBookingsByUserRequest
	(*ListBookingsByUserResponse)(nil),                     // 7: moviebooking.ListBookingsByUserResponse
	(*DeleteBookingByIDRequest)(nil),                       // 8: moviebooking.DeleteBookingByIDRequest
	(*DeleteBookingByIDResponse)(nil),                      // 9: moviebooking.DeleteBookingByIDResponse
	(*UpdateBookingStatusByBookingIDRequest)(nil),          // 10: moviebooking.UpdateBookingStatusByBookingIDRequest
	(*UpdateBookingStatusByBookingIDResponse)(nil),         // 11: moviebooking.UpdateBookingStatusByBookingIDResponse
	(*GetTheatersAndMovieScheduleByMovieNameRequest)(nil),  // 12: moviebooking.GetTheatersAndMovieScheduleByMovieNameRequest
	(*GetTheatersAndMovieScheduleByMovieNameResponse)(nil), // 13: moviebooking.GetTheatersAndMovieScheduleByMovieNameResponse
	(*GetMovieByNameAndLanguageRequest)(nil),               // 14: moviebooking.GetMovieByNameAndLanguageRequest
	(*GetMovieByNameAndLanguageResponse)(nil),              // 15: moviebooking.GetMovieByNameAndLanguageResponse
	(*GetMovieByNameRequest)(nil),                          // 16: moviebooking.GetMovieByNameRequest
	(*GetMovieByNameResponse)(nil),                         // 17: moviebooking.GetMovieByNameResponse
	(*GetMoviesByGenreRequest)(nil),                        // 18: moviebooking.GetMoviesByGenreRequest
	(*GetMoviesByGenreResponse)(nil),                       // 19: moviebooking.GetMoviesByGenreResponse
	(*GetMoviesByLanguageRequest)(nil),                     // 20: moviebooking.GetMoviesByLanguageRequest
	(*GetMoviesByLanguageResponse)(nil),                    // 21: moviebooking.GetMoviesByLanguageResponse
	(*GetTheatersByCityRequest)(nil),                       // 22: moviebooking.GetTheatersByCityRequest
	(*GetTheatersByCityResponse)(nil),                      // 23: moviebooking.GetTheatersByCityResponse
	(*GetTheatersByMovieIdRequest)(nil),                    // 24: moviebooking.GetTheatersByMovieIdRequest
	(*GetTheatersByMovieIdResponse)(nil),                   // 25: moviebooking.GetTheatersByMovieIdResponse
	(*GetScreensAndMovieScedulesByTheaterIdRequest)(nil),   // 26: moviebooking.GetScreensAndMovieScedulesByTheaterIdRequest
	(*GetScreensAndMovieScedulesByTheaterIdResponse)(nil),  // 27: moviebooking.GetScreensAndMovieScedulesByTheaterIdResponse
	(*ListShowTimeByTheaterIdRequest)(nil),                 // 28: moviebooking.ListShowTimeByTheaterIdRequest
	(*ListShowTimeByTheaterIdResponse)(nil),                // 29: moviebooking.ListShowTimeByTheaterIdResponse
	(*ListShowTimeByTheaterIdandMovieIdRequest)(nil),       // 30: moviebooking.ListShowTimeByTheaterIdandMovieIdRequest
	(*ListShowTimeByTheaterIdandMovieIdResponse)(nil),      // 31: moviebooking.ListShowTimeByTheaterIdandMovieIdResponse
	(*Seat)(nil),                                                          // 32: moviebooking.Seat
	(*CreateSeatsRequest)(nil),                                            // 33: moviebooking.CreateSeatsRequest
	(*RowAndSeatCategoryPrice)(nil),                                       // 34: moviebooking.RowAndSeatCategoryPrice
	(*GetSeatBySeatNumberAndScreenIdRequest)(nil),                         // 35: moviebooking.GetSeatBySeatNumberAndScreenIdRequest
	(*GetSeatBySeatNumberAndScreenIdResponse)(nil),                        // 36: moviebooking.GetSeatBySeatNumberAndScreenIdResponse
	(*GetSeatByIdRequest)(nil),                                            // 37: moviebooking.GetSeatByIdRequest
	(*GetSeatByIdResponse)(nil),                                           // 38: moviebooking.GetSeatByIdResponse
	(*CreateSeatsResponse)(nil),                                           // 39: moviebooking.CreateSeatsResponse
	(*GetSeatsByScreenIDRequest)(nil),                                     // 40: moviebooking.GetSeatsByScreenIDRequest
	(*GetSeatsByScreenIDResponse)(nil),                                    // 41: moviebooking.GetSeatsByScreenIDResponse
	(*DeleteSeatByIdRequest)(nil),                                         // 42: moviebooking.DeleteSeatByIdRequest
	(*DeleteSeatByIdResponse)(nil),                                        // 43: moviebooking.DeleteSeatByIdResponse
	(*DeleteSeatBySeatNumberAndScreenIDRequest)(nil),                      // 44: moviebooking.DeleteSeatBySeatNumberAndScreenIDRequest
	(*DeleteSeatBySeatNumberAndScreenIDResponse)(nil),                     // 45: moviebooking.DeleteSeatBySeatNumberAndScreenIDResponse
	(*MovieSchedule)(nil),                                                 // 46: moviebooking.MovieSchedule
	(*AddMovieScheduleRequest)(nil),                                       // 47: moviebooking.AddMovieScheduleRequest
	(*AddMovieScheduleResponse)(nil),                                      // 48: moviebooking.AddMovieScheduleResponse
	(*UpdateMovieScheduleRequest)(nil),                                    // 49: moviebooking.UpdateMovieScheduleRequest
	(*UpdateMovieScheduleResponse)(nil),                                   // 50: moviebooking.UpdateMovieScheduleResponse
	(*GetAllMovieScheduleRequest)(nil),                                    // 51: moviebooking.GetAllMovieScheduleRequest
	(*GetAllMovieScheduleResponse)(nil),                                   // 52: moviebooking.GetAllMovieScheduleResponse
	(*GetMovieScheduleByMovieIdRequest)(nil),                              // 53: moviebooking.GetMovieScheduleByMovieIdRequest
	(*GetMovieScheduleByMovieIdResponse)(nil),                             // 54: moviebooking.GetMovieScheduleByMovieIdResponse
	(*GetMovieScheduleByTheaterIdRequest)(nil),                            // 55: moviebooking.GetMovieScheduleByTheaterIdRequest
	(*GetMovieScheduleByTheaterIdResponse)(nil),                           // 56: moviebooking.GetMovieScheduleByTheaterIdResponse
	(*GetMovieScheduleByMovieIdAndTheaterIdRequest)(nil),                  // 57: moviebooking.GetMovieScheduleByMovieIdAndTheaterIdRequest
	(*GetMovieScheduleByMovieIdAndTheaterIdResponse)(nil),                 // 58: moviebooking.GetMovieScheduleByMovieIdAndTheaterIdResponse
	(*GetMovieScheduleByMovieIdAndShowTimeIdRequest)(nil),                 // 59: moviebooking.GetMovieScheduleByMovieIdAndShowTimeIdRequest
	(*GetMovieScheduleByMovieIdAndShowTimeIdResponse)(nil),                // 60: moviebooking.GetMovieScheduleByMovieIdAndShowTimeIdResponse
	(*GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest)(nil),            // 61: moviebooking.GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest
	(*GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse)(nil),           // 62: moviebooking.GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse
	(*GetMovieScheduleByIDRequest)(nil),                                   // 63: moviebooking.GetMovieScheduleByIDRequest
	(*GetMovieScheduleByIDResponse)(nil),                                  // 64: moviebooking.GetMovieScheduleByIDResponse
	(*DeleteMovieScheduleByIdRequest)(nil),                                // 65: moviebooking.DeleteMovieScheduleByIdRequest
	(*DeleteMovieScheduleByIdResponse)(nil),                               // 66: moviebooking.DeleteMovieScheduleByIdResponse
	(*DeleteMovieScheduleByMovieIdAndTheaterIdRequest)(nil),               // 67: moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdRequest
	(*DeleteMovieScheduleByMovieIdAndTheaterIdResponse)(nil),              // 68: moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdResponse
	(*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest)(nil),  // 69: moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest
	(*DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse)(nil), // 70: moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse
	(*RegisterMovieRequest)(nil),                                          // 71: moviebooking.RegisterMovieRequest
	(*RegisterMovieResponse)(nil),                                         // 72: moviebooking.RegisterMovieResponse
	(*UpdateMovieRequest)(nil),                                            // 73: moviebooking.UpdateMovieRequest
	(*UpdateMovieResponse)(nil),                                           // 74: moviebooking.UpdateMovieResponse
	(*ListMoviesRequest)(nil),                                             // 75: moviebooking.ListMoviesRequest
	(*Movie)(nil),                                                         // 76: moviebooking.Movie
	(*ListMoviesResponse)(nil),                                            // 77: moviebooking.ListMoviesResponse
	(*GetMovieDetailsRequest)(nil),                                        // 78: moviebooking.GetMovieDetailsRequest
	(*GetMovieDetailsResponse)(nil),                                       // 79: moviebooking.GetMovieDetailsResponse
	(*DeleteMovieRequest)(nil),                                            // 80: moviebooking.DeleteMovieRequest
	(*DeleteMovieResponse)(nil),                                           // 81: moviebooking.DeleteMovieResponse
	(*Theater)(nil),                                                       // 82: moviebooking.Theater
	(*AddTheaterRequest)(nil),                                             // 83: moviebooking.AddTheaterRequest
	(*AddTheaterResponse)(nil),                                            // 84: moviebooking.AddTheaterResponse
	(*DeleteTheaterRequest)(nil),                                          // 85: moviebooking.DeleteTheaterRequest
	(*DeleteTheaterResponse)(nil),                                         // 86: moviebooking.DeleteTheaterResponse
	(*DeleteTheaterByNameRequest)(nil),                                    // 87: moviebooking.DeleteTheaterByNameRequest
	(*DeleteTheaterByNameResponse)(nil),                                   // 88: moviebooking.DeleteTheaterByNameResponse
	(*GetTheaterByIDRequest)(nil),                                         // 89: moviebooking.GetTheaterByIDRequest
	(*GetTheaterByIDResponse)(nil),                                        // 90: moviebooking.GetTheaterByIDResponse
	(*GetTheaterByNameRequest)(nil),                                       // 91: moviebooking.GetTheaterByNameRequest
	(*GetTheaterByNameResponse)(nil),                                      // 92: moviebooking.GetTheaterByNameResponse
	(*UpdateTheaterRequest)(nil),                                          // 93: moviebooking.UpdateTheaterRequest
	(*UpdateTheaterResponse)(nil),                                         // 94: moviebooking.UpdateTheaterResponse
	(*ListTheatersRequest)(nil),                                           // 95: moviebooking.ListTheatersRequest
	(*ListTheatersResponse)(nil),                                          // 96: moviebooking.ListTheatersResponse
	(*GetTheatersByAdminIdRequest)(nil),                                   // 97: moviebooking.GetTheatersByAdminIdRequest
	(*GetTheatersByAdminIdResponse)(nil),                                  // 98: moviebooking.GetTheatersByAdminIdResponse
	(*AddTheaterTypeRequest)(nil),                                         // 99: moviebooking.AddTheaterTypeRequest
	(*AddTheaterTypeResponse)(nil),                                        // 100: moviebooking.AddTheaterTypeResponse
	(*DeleteTheaterTypeRequest)(nil),                                      // 101: moviebooking.DeleteTheaterTypeRequest
	(*DeleteTheaterTypeResponse)(nil),                                     // 102: moviebooking.DeleteTheaterTypeResponse
	(*DeleteTheaterTypeByNameRequest)(nil),                                // 103: moviebooking.DeleteTheaterTypeByNameRequest
	(*DeleteTheaterTypeByNameResponse)(nil),                               // 104: moviebooking.DeleteTheaterTypeByNameResponse
	(*GetTheaterTypeByIDRequest)(nil),                                     // 105: moviebooking.GetTheaterTypeByIDRequest
	(*GetTheaterTypeByIDResponse)(nil),                                    // 106: moviebooking.GetTheaterTypeByIDResponse
	(*TheaterType)(nil),                                                   // 107: moviebooking.TheaterType
	(*GetTheaterTypeByNameRequest)(nil),                                   // 108: moviebooking.GetTheaterTypeByNameRequest
	(*GetTheaterTypeBynameResponse)(nil),                                  // 109: moviebooking.GetTheaterTypeBynameResponse
	(*UpdateTheaterTypeRequest)(nil),                                      // 110: moviebooking.UpdateTheaterTypeRequest
	(*UpdateTheaterTypeResponse)(nil),                                     // 111: moviebooking.UpdateTheaterTypeResponse
	(*ListTheaterTypesRequest)(nil),                                       // 112: moviebooking.ListTheaterTypesRequest
	(*ListTheaterTypeResponse)(nil),                                       // 113: moviebooking.ListTheaterTypeResponse
	(*AddScreenTypeRequest)(nil),                                          // 114: moviebooking.AddScreenTypeRequest
	(*AddScreenTypeResponse)(nil),                                         // 115: moviebooking.AddScreenTypeResponse
	(*DeleteScreenTypeRequest)(nil),                                       // 116: moviebooking.DeleteScreenTypeRequest
	(*DeleteScreenTypeResponse)(nil),                                      // 117: moviebooking.DeleteScreenTypeResponse
	(*DeleteScreenTypeByNameRequest)(nil),                                 // 118: moviebooking.DeleteScreenTypeByNameRequest
	(*DeleteScreenTypeByNameResponse)(nil),                                // 119: moviebooking.DeleteScreenTypeByNameResponse
	(*GetScreenTypeByIDRequest)(nil),                                      // 120: moviebooking.GetScreenTypeByIDRequest
	(*GetScreenTypeByIDResponse)(nil),                                     // 121: moviebooking.GetScreenTypeByIDResponse
	(*ScreenType)(nil),                                                    // 122: moviebooking.ScreenType
	(*GetScreenTypeByNameRequest)(nil),                                    // 123: moviebooking.GetScreenTypeByNameRequest
	(*GetScreenTypeByNameResponse)(nil),                                   // 124: moviebooking.GetScreenTypeByNameResponse
	(*UpdateScreenTypeRequest)(nil),                                       // 125: moviebooking.UpdateScreenTypeRequest
	(*UpdateScreenTypeResponse)(nil),                                      // 126: moviebooking.UpdateScreenTypeResponse
	(*ListScreenTypesRequest)(nil),                                        // 127: moviebooking.ListScreenTypesRequest
	(*ListScreenTypesResponse)(nil),                                       // 128: moviebooking.ListScreenTypesResponse
	(*SeatCategory)(nil),                                                  // 129: moviebooking.SeatCategory
	(*AddSeatCategoryRequest)(nil),                                        // 130: moviebooking.AddSeatCategoryRequest
	(*AddSeatCategoryResponse)(nil),                                       // 131: moviebooking.AddSeatCategoryResponse
	(*DeleteSeatCategoryRequest)(nil),                                     // 132: moviebooking.DeleteSeatCategoryRequest
	(*DeleteSeatCategoryResponse)(nil),                                    // 133: moviebooking.DeleteSeatCategoryResponse
	(*DeleteSeatCategoryByNameRequest)(nil),                               // 134: moviebooking.DeleteSeatCategoryByNameRequest
	(*DeleteSeatCategoryByNameResponse)(nil),                              // 135: moviebooking.DeleteSeatCategoryByNameResponse
	(*GetSeatCategoryByIDRequest)(nil),                                    // 136: moviebooking.GetSeatCategoryByIDRequest
	(*GetSeatCategoryByIDResponse)(nil),                                   // 137: moviebooking.GetSeatCategoryByIDResponse
	(*GetSeatCategoryByNameRequest)(nil),                                  // 138: moviebooking.GetSeatCategoryByNameRequest
	(*GetSeatCategoryByNameResponse)(nil),                                 // 139: moviebooking.GetSeatCategoryByNameResponse
	(*UpdateSeatCategoryRequest)(nil),                                     // 140: moviebooking.UpdateSeatCategoryRequest
	(*UpdateSeatCategoryResponse)(nil),                                    // 141: moviebooking.UpdateSeatCategoryResponse
	(*ListSeatCategoriesRequest)(nil),                                     // 142: moviebooking.ListSeatCategoriesRequest
	(*ListSeatCategoriesResponse)(nil),                                    // 143: moviebooking.ListSeatCategoriesResponse
	(*TheaterScreen)(nil),                                                 // 144: moviebooking.TheaterScreen
	(*AddTheaterScreenRequest)(nil),                                       // 145: moviebooking.AddTheaterScreenRequest
	(*AddTheaterScreenResponse)(nil),                                      // 146: moviebooking.AddTheaterScreenResponse
	(*DeleteTheaterScreenRequest)(nil),                                    // 147: moviebooking.DeleteTheaterScreenRequest
	(*DeleteTheaterScreenResponse)(nil),                                   // 148: moviebooking.DeleteTheaterScreenResponse
	(*DeleteTheaterScreenByNumberRequest)(nil),                            // 149: moviebooking.DeleteTheaterScreenByNumberRequest
	(*DeleteTheaterScreenByNumberResponse)(nil),                           // 150: moviebooking.DeleteTheaterScreenByNumberResponse
	(*GetTheaterScreenByIDRequest)(nil),                                   // 151: moviebooking.GetTheaterScreenByIDRequest
	(*GetTheaterScreenByIDResponse)(nil),                                  // 152: moviebooking.GetTheaterScreenByIDResponse
	(*GetTheaterScreenByNumberRequest)(nil),                               // 153: moviebooking.GetTheaterScreenByNumberRequest
	(*GetTheaterScreenByNumberResponse)(nil),                              // 154: moviebooking.GetTheaterScreenByNumberResponse
	(*UpdateTheaterScreenRequest)(nil),                                    // 155: moviebooking.UpdateTheaterScreenRequest
	(*UpdateTheaterScreenResponse)(nil),                                   // 156: moviebooking.UpdateTheaterScreenResponse
	(*ListTheaterScreensRequest)(nil),                                     // 157: moviebooking.ListTheaterScreensRequest
	(*ListTheaterScreensResponse)(nil),                                    // 158: moviebooking.ListTheaterScreensResponse
	(*Showtime)(nil),                                                      // 159: moviebooking.Showtime
	(*AddShowtimeRequest)(nil),                                            // 160: moviebooking.AddShowtimeRequest
	(*AddShowtimeResponse)(nil),                                           // 161: moviebooking.AddShowtimeResponse
	(*DeleteShowtimeRequest)(nil),                                         // 162: moviebooking.DeleteShowtimeRequest
	(*DeleteShowtimeResponse)(nil),                                        // 163: moviebooking.DeleteShowtimeResponse
	(*DeleteShowtimeByDetailsRequest)(nil),                                // 164: moviebooking.DeleteShowtimeByDetailsRequest
	(*DeleteShowtimeByDetailsResponse)(nil),                               // 165: moviebooking.DeleteShowtimeByDetailsResponse
	(*GetShowtimeByIDRequest)(nil),                                        // 166: moviebooking.GetShowtimeByIDRequest
	(*GetShowtimeByIDResponse)(nil),                                       // 167: moviebooking.GetShowtimeByIDResponse
	(*GetShowtimeByDetailsRequest)(nil),                                   // 168: moviebooking.GetShowtimeByDetailsRequest
	(*GetShowtimeByDetailsResponse)(nil),                                  // 169: moviebooking.GetShowtimeByDetailsResponse
	(*UpdateShowtimeRequest)(nil),                                         // 170: moviebooking.UpdateShowtimeRequest
	(*UpdateShowtimeResponse)(nil),                                        // 171: moviebooking.UpdateShowtimeResponse
	(*ListShowtimesRequest)(nil),                                          // 172: moviebooking.ListShowtimesRequest
	(*ListShowtimesResponse)(nil),                                         // 173: moviebooking.ListShowtimesResponse
	(*ListShowtimesByShowDateAndMovieIdRequest)(nil),                      // 174: moviebooking.ListShowtimesByShowDateAndMovieIdRequest
	(*ListShowtimesByShowDateAndMovieIdResponse)(nil),                     // 175: moviebooking.ListShowtimesByShowDateAndMovieIdResponse
	(*timestamp.Timestamp)(nil),                                           // 176: google.protobuf.Timestamp
}
var file_movie_booking_movie_booking_proto_depIdxs = []int32{
	176, // 0: moviebooking.Booking.booking_date:type_name -> google.protobuf.Timestamp
	1,   // 1: moviebooking.Booking.booking_seats:type_name -> moviebooking.BookingSeat
	0,   // 2: moviebooking.CreateBookingResponse.booking:type_name -> moviebooking.Booking
	0,   // 3: moviebooking.GetBookingByIDResponse.booking:type_name -> moviebooking.Booking
	0,   // 4: moviebooking.ListBookingsByUserResponse.bookings:type_name -> moviebooking.Booking
	46,  // 5: moviebooking.GetTheatersAndMovieScheduleByMovieNameResponse.movie_scedule:type_name -> moviebooking.MovieSchedule
	76,  // 6: moviebooking.GetMovieByNameAndLanguageResponse.Movie:type_name -> moviebooking.Movie
	76,  // 7: moviebooking.GetMovieByNameResponse.movie:type_name -> moviebooking.Movie
	76,  // 8: moviebooking.GetMoviesByGenreResponse.movie:type_name -> moviebooking.Movie
	76,  // 9: moviebooking.GetMoviesByLanguageResponse.movie:type_name -> moviebooking.Movie
	82,  // 10: moviebooking.GetTheatersByCityResponse.theater:type_name -> moviebooking.Theater
	82,  // 11: moviebooking.GetTheatersByMovieIdResponse.theater:type_name -> moviebooking.Theater
	82,  // 12: moviebooking.GetScreensAndMovieScedulesByTheaterIdResponse.theater:type_name -> moviebooking.Theater
	46,  // 13: moviebooking.GetScreensAndMovieScedulesByTheaterIdResponse.movie_schedule:type_name -> moviebooking.MovieSchedule
	144, // 14: moviebooking.GetScreensAndMovieScedulesByTheaterIdResponse.theater_screen:type_name -> moviebooking.TheaterScreen
	82,  // 15: moviebooking.ListShowTimeByTheaterIdResponse.theater:type_name -> moviebooking.Theater
	159, // 16: moviebooking.ListShowTimeByTheaterIdResponse.show_time:type_name -> moviebooking.Showtime
	82,  // 17: moviebooking.ListShowTimeByTheaterIdandMovieIdResponse.theater:type_name -> moviebooking.Theater
	76,  // 18: moviebooking.ListShowTimeByTheaterIdandMovieIdResponse.movie:type_name -> moviebooking.Movie
	159, // 19: moviebooking.ListShowTimeByTheaterIdandMovieIdResponse.show_time:type_name -> moviebooking.Showtime
	144, // 20: moviebooking.Seat.theater_screen:type_name -> moviebooking.TheaterScreen
	129, // 21: moviebooking.Seat.seat_category:type_name -> moviebooking.SeatCategory
	34,  // 22: moviebooking.CreateSeatsRequest.rowseat_categories:type_name -> moviebooking.RowAndSeatCategoryPrice
	32,  // 23: moviebooking.GetSeatBySeatNumberAndScreenIdResponse.seat:type_name -> moviebooking.Seat
	32,  // 24: moviebooking.GetSeatByIdResponse.seat:type_name -> moviebooking.Seat
	32,  // 25: moviebooking.GetSeatsByScreenIDResponse.seats:type_name -> moviebooking.Seat
	76,  // 26: moviebooking.MovieSchedule.movie:type_name -> moviebooking.Movie
	82,  // 27: moviebooking.MovieSchedule.theater:type_name -> moviebooking.Theater
	159, // 28: moviebooking.MovieSchedule.show_time:type_name -> moviebooking.Showtime
	46,  // 29: moviebooking.AddMovieScheduleRequest.movie_schedule:type_name -> moviebooking.MovieSchedule
	46,  // 30: moviebooking.UpdateMovieScheduleRequest.movie_schedule:type_name -> moviebooking.MovieSchedule
	46,  // 31: moviebooking.GetAllMovieScheduleResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 32: moviebooking.GetMovieScheduleByMovieIdResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 33: moviebooking.GetMovieScheduleByTheaterIdResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 34: moviebooking.GetMovieScheduleByMovieIdAndTheaterIdResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 35: moviebooking.GetMovieScheduleByMovieIdAndShowTimeIdResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 36: moviebooking.GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse.movie_schedules:type_name -> moviebooking.MovieSchedule
	46,  // 37: moviebooking.GetMovieScheduleByIDResponse.movie_schedule:type_name -> moviebooking.MovieSchedule
	76,  // 38: moviebooking.ListMoviesResponse.movies:type_name -> moviebooking.Movie
	76,  // 39: moviebooking.GetMovieDetailsResponse.movie:type_name -> moviebooking.Movie
	107, // 40: moviebooking.Theater.theater_type:type_name -> moviebooking.TheaterType
	82,  // 41: moviebooking.GetTheaterByIDResponse.theater:type_name -> moviebooking.Theater
	82,  // 42: moviebooking.GetTheaterByNameResponse.theater:type_name -> moviebooking.Theater
	82,  // 43: moviebooking.ListTheatersResponse.theaters:type_name -> moviebooking.Theater
	82,  // 44: moviebooking.GetTheatersByAdminIdResponse.theaters:type_name -> moviebooking.Theater
	107, // 45: moviebooking.GetTheaterTypeByIDResponse.theater_type:type_name -> moviebooking.TheaterType
	107, // 46: moviebooking.GetTheaterTypeBynameResponse.theater_type:type_name -> moviebooking.TheaterType
	107, // 47: moviebooking.ListTheaterTypeResponse.theater_types:type_name -> moviebooking.TheaterType
	122, // 48: moviebooking.GetScreenTypeByIDResponse.screen_type:type_name -> moviebooking.ScreenType
	122, // 49: moviebooking.GetScreenTypeByNameResponse.screen_type:type_name -> moviebooking.ScreenType
	122, // 50: moviebooking.ListScreenTypesResponse.screen_types:type_name -> moviebooking.ScreenType
	129, // 51: moviebooking.AddSeatCategoryRequest.seat_category:type_name -> moviebooking.SeatCategory
	129, // 52: moviebooking.GetSeatCategoryByIDResponse.seat_category:type_name -> moviebooking.SeatCategory
	129, // 53: moviebooking.GetSeatCategoryByNameResponse.seat_category:type_name -> moviebooking.SeatCategory
	129, // 54: moviebooking.UpdateSeatCategoryRequest.seat_category:type_name -> moviebooking.SeatCategory
	129, // 55: moviebooking.ListSeatCategoriesResponse.seat_categories:type_name -> moviebooking.SeatCategory
	82,  // 56: moviebooking.TheaterScreen.theater:type_name -> moviebooking.Theater
	122, // 57: moviebooking.TheaterScreen.screen_type:type_name -> moviebooking.ScreenType
	144, // 58: moviebooking.AddTheaterScreenRequest.TheaterScreen:type_name -> moviebooking.TheaterScreen
	144, // 59: moviebooking.GetTheaterScreenByIDResponse.TheaterScreen:type_name -> moviebooking.TheaterScreen
	144, // 60: moviebooking.GetTheaterScreenByNumberResponse.TheaterScreen:type_name -> moviebooking.TheaterScreen
	144, // 61: moviebooking.UpdateTheaterScreenRequest.TheaterScreen:type_name -> moviebooking.TheaterScreen
	144, // 62: moviebooking.ListTheaterScreensResponse.TheaterScreens:type_name -> moviebooking.TheaterScreen
	176, // 63: moviebooking.Showtime.show_date:type_name -> google.protobuf.Timestamp
	176, // 64: moviebooking.Showtime.show_time:type_name -> google.protobuf.Timestamp
	76,  // 65: moviebooking.Showtime.movie:type_name -> moviebooking.Movie
	144, // 66: moviebooking.Showtime.theater_screen:type_name -> moviebooking.TheaterScreen
	159, // 67: moviebooking.AddShowtimeRequest.showtime:type_name -> moviebooking.Showtime
	176, // 68: moviebooking.DeleteShowtimeByDetailsRequest.show_date:type_name -> google.protobuf.Timestamp
	176, // 69: moviebooking.DeleteShowtimeByDetailsRequest.show_time:type_name -> google.protobuf.Timestamp
	159, // 70: moviebooking.GetShowtimeByIDResponse.showtime:type_name -> moviebooking.Showtime
	176, // 71: moviebooking.GetShowtimeByDetailsRequest.show_date:type_name -> google.protobuf.Timestamp
	176, // 72: moviebooking.GetShowtimeByDetailsRequest.show_time:type_name -> google.protobuf.Timestamp
	159, // 73: moviebooking.GetShowtimeByDetailsResponse.showtime:type_name -> moviebooking.Showtime
	159, // 74: moviebooking.UpdateShowtimeRequest.showtime:type_name -> moviebooking.Showtime
	159, // 75: moviebooking.ListShowtimesResponse.showtimes:type_name -> moviebooking.Showtime
	176, // 76: moviebooking.ListShowtimesByShowDateAndMovieIdRequest.show_date:type_name -> google.protobuf.Timestamp
	159, // 77: moviebooking.ListShowtimesByShowDateAndMovieIdResponse.showtimes:type_name -> moviebooking.Showtime
	71,  // 78: moviebooking.MovieService.RegisterMovie:input_type -> moviebooking.RegisterMovieRequest
	73,  // 79: moviebooking.MovieService.UpdateMovie:input_type -> moviebooking.UpdateMovieRequest
	75,  // 80: moviebooking.MovieService.ListMovies:input_type -> moviebooking.ListMoviesRequest
	78,  // 81: moviebooking.MovieService.GetMovieDetailsByID:input_type -> moviebooking.GetMovieDetailsRequest
	80,  // 82: moviebooking.MovieService.DeleteMovie:input_type -> moviebooking.DeleteMovieRequest
	16,  // 83: moviebooking.MovieService.GetMovieByName:input_type -> moviebooking.GetMovieByNameRequest
	18,  // 84: moviebooking.MovieService.GetMoviesByGenre:input_type -> moviebooking.GetMoviesByGenreRequest
	20,  // 85: moviebooking.MovieService.GetMoviesByLanguage:input_type -> moviebooking.GetMoviesByLanguageRequest
	14,  // 86: moviebooking.MovieService.GetMovieByNameAndLanguage:input_type -> moviebooking.GetMovieByNameAndLanguageRequest
	99,  // 87: moviebooking.TheatreService.AddTheaterType:input_type -> moviebooking.AddTheaterTypeRequest
	101, // 88: moviebooking.TheatreService.DeleteTheaterTypeByID:input_type -> moviebooking.DeleteTheaterTypeRequest
	103, // 89: moviebooking.TheatreService.DeleteTheaterTypeByName:input_type -> moviebooking.DeleteTheaterTypeByNameRequest
	105, // 90: moviebooking.TheatreService.GetTheaterTypeByID:input_type -> moviebooking.GetTheaterTypeByIDRequest
	108, // 91: moviebooking.TheatreService.GetTheaterTypeByName:input_type -> moviebooking.GetTheaterTypeByNameRequest
	110, // 92: moviebooking.TheatreService.UpdateTheaterType:input_type -> moviebooking.UpdateTheaterTypeRequest
	112, // 93: moviebooking.TheatreService.ListTheaterTypes:input_type -> moviebooking.ListTheaterTypesRequest
	114, // 94: moviebooking.TheatreService.AddScreenType:input_type -> moviebooking.AddScreenTypeRequest
	116, // 95: moviebooking.TheatreService.DeleteScreenTypeByID:input_type -> moviebooking.DeleteScreenTypeRequest
	118, // 96: moviebooking.TheatreService.DeleteScreenTypeByName:input_type -> moviebooking.DeleteScreenTypeByNameRequest
	120, // 97: moviebooking.TheatreService.GetScreenTypeByID:input_type -> moviebooking.GetScreenTypeByIDRequest
	123, // 98: moviebooking.TheatreService.GetScreenTypeByName:input_type -> moviebooking.GetScreenTypeByNameRequest
	125, // 99: moviebooking.TheatreService.UpdateScreenType:input_type -> moviebooking.UpdateScreenTypeRequest
	127, // 100: moviebooking.TheatreService.ListScreenTypes:input_type -> moviebooking.ListScreenTypesRequest
	130, // 101: moviebooking.TheatreService.AddSeatCategory:input_type -> moviebooking.AddSeatCategoryRequest
	132, // 102: moviebooking.TheatreService.DeleteSeatCategoryByID:input_type -> moviebooking.DeleteSeatCategoryRequest
	134, // 103: moviebooking.TheatreService.DeleteSeatCategoryByName:input_type -> moviebooking.DeleteSeatCategoryByNameRequest
	136, // 104: moviebooking.TheatreService.GetSeatCategoryByID:input_type -> moviebooking.GetSeatCategoryByIDRequest
	138, // 105: moviebooking.TheatreService.GetSeatCategoryByName:input_type -> moviebooking.GetSeatCategoryByNameRequest
	140, // 106: moviebooking.TheatreService.UpdateSeatCategory:input_type -> moviebooking.UpdateSeatCategoryRequest
	142, // 107: moviebooking.TheatreService.ListSeatCategories:input_type -> moviebooking.ListSeatCategoriesRequest
	83,  // 108: moviebooking.TheatreService.AddTheater:input_type -> moviebooking.AddTheaterRequest
	85,  // 109: moviebooking.TheatreService.DeleteTheaterByID:input_type -> moviebooking.DeleteTheaterRequest
	87,  // 110: moviebooking.TheatreService.DeleteTheaterByName:input_type -> moviebooking.DeleteTheaterByNameRequest
	89,  // 111: moviebooking.TheatreService.GetTheaterByID:input_type -> moviebooking.GetTheaterByIDRequest
	91,  // 112: moviebooking.TheatreService.GetTheaterByName:input_type -> moviebooking.GetTheaterByNameRequest
	93,  // 113: moviebooking.TheatreService.UpdateTheater:input_type -> moviebooking.UpdateTheaterRequest
	95,  // 114: moviebooking.TheatreService.ListTheaters:input_type -> moviebooking.ListTheatersRequest
	97,  // 115: moviebooking.TheatreService.GetTheatersByAdminID:input_type -> moviebooking.GetTheatersByAdminIdRequest
	145, // 116: moviebooking.TheatreService.AddTheaterScreen:input_type -> moviebooking.AddTheaterScreenRequest
	147, // 117: moviebooking.TheatreService.DeleteTheaterScreenByID:input_type -> moviebooking.DeleteTheaterScreenRequest
	149, // 118: moviebooking.TheatreService.DeleteTheaterScreenByNumber:input_type -> moviebooking.DeleteTheaterScreenByNumberRequest
	151, // 119: moviebooking.TheatreService.GetTheaterScreenByID:input_type -> moviebooking.GetTheaterScreenByIDRequest
	153, // 120: moviebooking.TheatreService.GetTheaterScreenByNumber:input_type -> moviebooking.GetTheaterScreenByNumberRequest
	155, // 121: moviebooking.TheatreService.UpdateTheaterScreen:input_type -> moviebooking.UpdateTheaterScreenRequest
	157, // 122: moviebooking.TheatreService.ListTheaterScreens:input_type -> moviebooking.ListTheaterScreensRequest
	160, // 123: moviebooking.TheatreService.AddShowtime:input_type -> moviebooking.AddShowtimeRequest
	162, // 124: moviebooking.TheatreService.DeleteShowtimeByID:input_type -> moviebooking.DeleteShowtimeRequest
	164, // 125: moviebooking.TheatreService.DeleteShowtimeByDetails:input_type -> moviebooking.DeleteShowtimeByDetailsRequest
	166, // 126: moviebooking.TheatreService.GetShowtimeByID:input_type -> moviebooking.GetShowtimeByIDRequest
	168, // 127: moviebooking.TheatreService.GetShowtimeByDetails:input_type -> moviebooking.GetShowtimeByDetailsRequest
	170, // 128: moviebooking.TheatreService.UpdateShowtime:input_type -> moviebooking.UpdateShowtimeRequest
	172, // 129: moviebooking.TheatreService.ListShowtimes:input_type -> moviebooking.ListShowtimesRequest
	174, // 130: moviebooking.TheatreService.ListShowtimesByShowDateAndMovieID:input_type -> moviebooking.ListShowtimesByShowDateAndMovieIdRequest
	47,  // 131: moviebooking.TheatreService.AddMovieSchedule:input_type -> moviebooking.AddMovieScheduleRequest
	49,  // 132: moviebooking.TheatreService.UpdateMovieSchedule:input_type -> moviebooking.UpdateMovieScheduleRequest
	51,  // 133: moviebooking.TheatreService.GetAllMovieSchedules:input_type -> moviebooking.GetAllMovieScheduleRequest
	53,  // 134: moviebooking.TheatreService.GetMovieScheduleByMovieID:input_type -> moviebooking.GetMovieScheduleByMovieIdRequest
	55,  // 135: moviebooking.TheatreService.GetMovieScheduleByTheaterID:input_type -> moviebooking.GetMovieScheduleByTheaterIdRequest
	57,  // 136: moviebooking.TheatreService.GetMovieScheduleByMovieIdAndTheaterId:input_type -> moviebooking.GetMovieScheduleByMovieIdAndTheaterIdRequest
	59,  // 137: moviebooking.TheatreService.GetMovieScheduleByMovieIdAndShowTimeId:input_type -> moviebooking.GetMovieScheduleByMovieIdAndShowTimeIdRequest
	61,  // 138: moviebooking.TheatreService.GetMovieScheduleByTheaterIdAndShowTimeId:input_type -> moviebooking.GetGetMovieScheduleByTheaterIdAndShowTimeIdRequest
	63,  // 139: moviebooking.TheatreService.GetMovieScheduleByID:input_type -> moviebooking.GetMovieScheduleByIDRequest
	65,  // 140: moviebooking.TheatreService.DeleteMovieScheduleById:input_type -> moviebooking.DeleteMovieScheduleByIdRequest
	67,  // 141: moviebooking.TheatreService.DeleteMovieScheduleByMovieIdAndTheaterId:input_type -> moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdRequest
	69,  // 142: moviebooking.TheatreService.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeId:input_type -> moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdRequest
	33,  // 143: moviebooking.TheatreService.CreateSeats:input_type -> moviebooking.CreateSeatsRequest
	40,  // 144: moviebooking.TheatreService.GetSeatsByScreenID:input_type -> moviebooking.GetSeatsByScreenIDRequest
	37,  // 145: moviebooking.TheatreService.GetSeatByID:input_type -> moviebooking.GetSeatByIdRequest
	35,  // 146: moviebooking.TheatreService.GetSeatBySeatNumberAndScreenID:input_type -> moviebooking.GetSeatBySeatNumberAndScreenIdRequest
	42,  // 147: moviebooking.TheatreService.DeleteSeatByID:input_type -> moviebooking.DeleteSeatByIdRequest
	44,  // 148: moviebooking.TheatreService.DeleteSeatBySeatNumberAndScreenID:input_type -> moviebooking.DeleteSeatBySeatNumberAndScreenIDRequest
	22,  // 149: moviebooking.TheatreService.GetTheatersByCity:input_type -> moviebooking.GetTheatersByCityRequest
	12,  // 150: moviebooking.TheatreService.GetTheatersAndMovieScheduleByMovieName:input_type -> moviebooking.GetTheatersAndMovieScheduleByMovieNameRequest
	26,  // 151: moviebooking.TheatreService.GetScreensAndMovieScedulesByTheaterID:input_type -> moviebooking.GetScreensAndMovieScedulesByTheaterIdRequest
	28,  // 152: moviebooking.TheatreService.ListShowTimeByTheaterID:input_type -> moviebooking.ListShowTimeByTheaterIdRequest
	30,  // 153: moviebooking.TheatreService.ListShowTimeByTheaterIDandMovieID:input_type -> moviebooking.ListShowTimeByTheaterIdandMovieIdRequest
	2,   // 154: moviebooking.BookingService.CreateBooking:input_type -> moviebooking.CreateBookingRequest
	4,   // 155: moviebooking.BookingService.GetBookingByID:input_type -> moviebooking.GetBookingByIDRequest
	6,   // 156: moviebooking.BookingService.ListBookingsByUser:input_type -> moviebooking.ListBookingsByUserRequest
	8,   // 157: moviebooking.BookingService.DeleteBookingByBookingID:input_type -> moviebooking.DeleteBookingByIDRequest
	10,  // 158: moviebooking.BookingService.UpdateBookingStatusByBookingID:input_type -> moviebooking.UpdateBookingStatusByBookingIDRequest
	72,  // 159: moviebooking.MovieService.RegisterMovie:output_type -> moviebooking.RegisterMovieResponse
	74,  // 160: moviebooking.MovieService.UpdateMovie:output_type -> moviebooking.UpdateMovieResponse
	77,  // 161: moviebooking.MovieService.ListMovies:output_type -> moviebooking.ListMoviesResponse
	79,  // 162: moviebooking.MovieService.GetMovieDetailsByID:output_type -> moviebooking.GetMovieDetailsResponse
	81,  // 163: moviebooking.MovieService.DeleteMovie:output_type -> moviebooking.DeleteMovieResponse
	17,  // 164: moviebooking.MovieService.GetMovieByName:output_type -> moviebooking.GetMovieByNameResponse
	19,  // 165: moviebooking.MovieService.GetMoviesByGenre:output_type -> moviebooking.GetMoviesByGenreResponse
	21,  // 166: moviebooking.MovieService.GetMoviesByLanguage:output_type -> moviebooking.GetMoviesByLanguageResponse
	15,  // 167: moviebooking.MovieService.GetMovieByNameAndLanguage:output_type -> moviebooking.GetMovieByNameAndLanguageResponse
	100, // 168: moviebooking.TheatreService.AddTheaterType:output_type -> moviebooking.AddTheaterTypeResponse
	102, // 169: moviebooking.TheatreService.DeleteTheaterTypeByID:output_type -> moviebooking.DeleteTheaterTypeResponse
	104, // 170: moviebooking.TheatreService.DeleteTheaterTypeByName:output_type -> moviebooking.DeleteTheaterTypeByNameResponse
	106, // 171: moviebooking.TheatreService.GetTheaterTypeByID:output_type -> moviebooking.GetTheaterTypeByIDResponse
	109, // 172: moviebooking.TheatreService.GetTheaterTypeByName:output_type -> moviebooking.GetTheaterTypeBynameResponse
	111, // 173: moviebooking.TheatreService.UpdateTheaterType:output_type -> moviebooking.UpdateTheaterTypeResponse
	113, // 174: moviebooking.TheatreService.ListTheaterTypes:output_type -> moviebooking.ListTheaterTypeResponse
	115, // 175: moviebooking.TheatreService.AddScreenType:output_type -> moviebooking.AddScreenTypeResponse
	117, // 176: moviebooking.TheatreService.DeleteScreenTypeByID:output_type -> moviebooking.DeleteScreenTypeResponse
	119, // 177: moviebooking.TheatreService.DeleteScreenTypeByName:output_type -> moviebooking.DeleteScreenTypeByNameResponse
	121, // 178: moviebooking.TheatreService.GetScreenTypeByID:output_type -> moviebooking.GetScreenTypeByIDResponse
	124, // 179: moviebooking.TheatreService.GetScreenTypeByName:output_type -> moviebooking.GetScreenTypeByNameResponse
	126, // 180: moviebooking.TheatreService.UpdateScreenType:output_type -> moviebooking.UpdateScreenTypeResponse
	128, // 181: moviebooking.TheatreService.ListScreenTypes:output_type -> moviebooking.ListScreenTypesResponse
	131, // 182: moviebooking.TheatreService.AddSeatCategory:output_type -> moviebooking.AddSeatCategoryResponse
	133, // 183: moviebooking.TheatreService.DeleteSeatCategoryByID:output_type -> moviebooking.DeleteSeatCategoryResponse
	135, // 184: moviebooking.TheatreService.DeleteSeatCategoryByName:output_type -> moviebooking.DeleteSeatCategoryByNameResponse
	137, // 185: moviebooking.TheatreService.GetSeatCategoryByID:output_type -> moviebooking.GetSeatCategoryByIDResponse
	139, // 186: moviebooking.TheatreService.GetSeatCategoryByName:output_type -> moviebooking.GetSeatCategoryByNameResponse
	141, // 187: moviebooking.TheatreService.UpdateSeatCategory:output_type -> moviebooking.UpdateSeatCategoryResponse
	143, // 188: moviebooking.TheatreService.ListSeatCategories:output_type -> moviebooking.ListSeatCategoriesResponse
	84,  // 189: moviebooking.TheatreService.AddTheater:output_type -> moviebooking.AddTheaterResponse
	86,  // 190: moviebooking.TheatreService.DeleteTheaterByID:output_type -> moviebooking.DeleteTheaterResponse
	88,  // 191: moviebooking.TheatreService.DeleteTheaterByName:output_type -> moviebooking.DeleteTheaterByNameResponse
	90,  // 192: moviebooking.TheatreService.GetTheaterByID:output_type -> moviebooking.GetTheaterByIDResponse
	92,  // 193: moviebooking.TheatreService.GetTheaterByName:output_type -> moviebooking.GetTheaterByNameResponse
	94,  // 194: moviebooking.TheatreService.UpdateTheater:output_type -> moviebooking.UpdateTheaterResponse
	96,  // 195: moviebooking.TheatreService.ListTheaters:output_type -> moviebooking.ListTheatersResponse
	98,  // 196: moviebooking.TheatreService.GetTheatersByAdminID:output_type -> moviebooking.GetTheatersByAdminIdResponse
	146, // 197: moviebooking.TheatreService.AddTheaterScreen:output_type -> moviebooking.AddTheaterScreenResponse
	148, // 198: moviebooking.TheatreService.DeleteTheaterScreenByID:output_type -> moviebooking.DeleteTheaterScreenResponse
	150, // 199: moviebooking.TheatreService.DeleteTheaterScreenByNumber:output_type -> moviebooking.DeleteTheaterScreenByNumberResponse
	152, // 200: moviebooking.TheatreService.GetTheaterScreenByID:output_type -> moviebooking.GetTheaterScreenByIDResponse
	154, // 201: moviebooking.TheatreService.GetTheaterScreenByNumber:output_type -> moviebooking.GetTheaterScreenByNumberResponse
	156, // 202: moviebooking.TheatreService.UpdateTheaterScreen:output_type -> moviebooking.UpdateTheaterScreenResponse
	158, // 203: moviebooking.TheatreService.ListTheaterScreens:output_type -> moviebooking.ListTheaterScreensResponse
	161, // 204: moviebooking.TheatreService.AddShowtime:output_type -> moviebooking.AddShowtimeResponse
	163, // 205: moviebooking.TheatreService.DeleteShowtimeByID:output_type -> moviebooking.DeleteShowtimeResponse
	165, // 206: moviebooking.TheatreService.DeleteShowtimeByDetails:output_type -> moviebooking.DeleteShowtimeByDetailsResponse
	167, // 207: moviebooking.TheatreService.GetShowtimeByID:output_type -> moviebooking.GetShowtimeByIDResponse
	169, // 208: moviebooking.TheatreService.GetShowtimeByDetails:output_type -> moviebooking.GetShowtimeByDetailsResponse
	171, // 209: moviebooking.TheatreService.UpdateShowtime:output_type -> moviebooking.UpdateShowtimeResponse
	173, // 210: moviebooking.TheatreService.ListShowtimes:output_type -> moviebooking.ListShowtimesResponse
	175, // 211: moviebooking.TheatreService.ListShowtimesByShowDateAndMovieID:output_type -> moviebooking.ListShowtimesByShowDateAndMovieIdResponse
	48,  // 212: moviebooking.TheatreService.AddMovieSchedule:output_type -> moviebooking.AddMovieScheduleResponse
	50,  // 213: moviebooking.TheatreService.UpdateMovieSchedule:output_type -> moviebooking.UpdateMovieScheduleResponse
	52,  // 214: moviebooking.TheatreService.GetAllMovieSchedules:output_type -> moviebooking.GetAllMovieScheduleResponse
	54,  // 215: moviebooking.TheatreService.GetMovieScheduleByMovieID:output_type -> moviebooking.GetMovieScheduleByMovieIdResponse
	56,  // 216: moviebooking.TheatreService.GetMovieScheduleByTheaterID:output_type -> moviebooking.GetMovieScheduleByTheaterIdResponse
	58,  // 217: moviebooking.TheatreService.GetMovieScheduleByMovieIdAndTheaterId:output_type -> moviebooking.GetMovieScheduleByMovieIdAndTheaterIdResponse
	60,  // 218: moviebooking.TheatreService.GetMovieScheduleByMovieIdAndShowTimeId:output_type -> moviebooking.GetMovieScheduleByMovieIdAndShowTimeIdResponse
	62,  // 219: moviebooking.TheatreService.GetMovieScheduleByTheaterIdAndShowTimeId:output_type -> moviebooking.GetGetMovieScheduleByTheaterIdAndShowTimeIdResponse
	64,  // 220: moviebooking.TheatreService.GetMovieScheduleByID:output_type -> moviebooking.GetMovieScheduleByIDResponse
	66,  // 221: moviebooking.TheatreService.DeleteMovieScheduleById:output_type -> moviebooking.DeleteMovieScheduleByIdResponse
	68,  // 222: moviebooking.TheatreService.DeleteMovieScheduleByMovieIdAndTheaterId:output_type -> moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdResponse
	70,  // 223: moviebooking.TheatreService.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeId:output_type -> moviebooking.DeleteMovieScheduleByMovieIdAndTheaterIdAndShowTimeIdResponse
	39,  // 224: moviebooking.TheatreService.CreateSeats:output_type -> moviebooking.CreateSeatsResponse
	41,  // 225: moviebooking.TheatreService.GetSeatsByScreenID:output_type -> moviebooking.GetSeatsByScreenIDResponse
	38,  // 226: moviebooking.TheatreService.GetSeatByID:output_type -> moviebooking.GetSeatByIdResponse
	36,  // 227: moviebooking.TheatreService.GetSeatBySeatNumberAndScreenID:output_type -> moviebooking.GetSeatBySeatNumberAndScreenIdResponse
	43,  // 228: moviebooking.TheatreService.DeleteSeatByID:output_type -> moviebooking.DeleteSeatByIdResponse
	45,  // 229: moviebooking.TheatreService.DeleteSeatBySeatNumberAndScreenID:output_type -> moviebooking.DeleteSeatBySeatNumberAndScreenIDResponse
	23,  // 230: moviebooking.TheatreService.GetTheatersByCity:output_type -> moviebooking.GetTheatersByCityResponse
	13,  // 231: moviebooking.TheatreService.GetTheatersAndMovieScheduleByMovieName:output_type -> moviebooking.GetTheatersAndMovieScheduleByMovieNameResponse
	27,  // 232: moviebooking.TheatreService.GetScreensAndMovieScedulesByTheaterID:output_type -> moviebooking.GetScreensAndMovieScedulesByTheaterIdResponse
	29,  // 233: moviebooking.TheatreService.ListShowTimeByTheaterID:output_type -> moviebooking.ListShowTimeByTheaterIdResponse
	31,  // 234: moviebooking.TheatreService.ListShowTimeByTheaterIDandMovieID:output_type -> moviebooking.ListShowTimeByTheaterIdandMovieIdResponse
	3,   // 235: moviebooking.BookingService.CreateBooking:output_type -> moviebooking.CreateBookingResponse
	5,   // 236: moviebooking.BookingService.GetBookingByID:output_type -> moviebooking.GetBookingByIDResponse
	7,   // 237: moviebooking.BookingService.ListBookingsByUser:output_type -> moviebooking.ListBookingsByUserResponse
	9,   // 238: moviebooking.BookingService.DeleteBookingByBookingID:output_type -> moviebooking.DeleteBookingByIDResponse
	11,  // 239: moviebooking.BookingService.UpdateBookingStatusByBookingID:output_type -> moviebooking.UpdateBookingStatusByBookingIDResponse
	159, // [159:240] is the sub-list for method output_type
	78,  // [78:159] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_movie_booking_movie_booking_proto_init() }
func file_movie_booking_movie_booking_proto_init() {
	if File_movie_booking_movie_booking_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_movie_booking_movie_booking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   176,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_movie_booking_movie_booking_proto_goTypes,
		DependencyIndexes: file_movie_booking_movie_booking_proto_depIdxs,
		MessageInfos:      file_movie_booking_movie_booking_proto_msgTypes,
	}.Build()
	File_movie_booking_movie_booking_proto = out.File
	file_movie_booking_movie_booking_proto_rawDesc = nil
	file_movie_booking_movie_booking_proto_goTypes = nil
	file_movie_booking_movie_booking_proto_depIdxs = nil
}

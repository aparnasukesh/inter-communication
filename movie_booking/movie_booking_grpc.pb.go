// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: movie_booking/movie_booking.proto

package movie_booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MovieService_RegisterMovie_FullMethodName   = "/moviebooking.MovieService/RegisterMovie"
	MovieService_UpdateMovie_FullMethodName     = "/moviebooking.MovieService/UpdateMovie"
	MovieService_ListMovies_FullMethodName      = "/moviebooking.MovieService/ListMovies"
	MovieService_GetMovieDetails_FullMethodName = "/moviebooking.MovieService/GetMovieDetails"
	MovieService_DeleteMovie_FullMethodName     = "/moviebooking.MovieService/DeleteMovie"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Movie Service definition
type MovieServiceClient interface {
	RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error)
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_RegisterMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_ListMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieDetailsResponse)
	err := c.cc.Invoke(ctx, MovieService_GetMovieDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
//
// Movie Service definition
type MovieServiceServer interface {
	RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error)
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieDetails not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_RegisterMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).RegisterMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_RegisterMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).RegisterMovie(ctx, req.(*RegisterMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovieDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMovieDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieDetails(ctx, req.(*GetMovieDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebooking.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMovie",
			Handler:    _MovieService_RegisterMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _MovieService_ListMovies_Handler,
		},
		{
			MethodName: "GetMovieDetails",
			Handler:    _MovieService_GetMovieDetails_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_booking/movie_booking.proto",
}

const (
	TheatreService_AddTheaterType_FullMethodName           = "/moviebooking.TheatreService/AddTheaterType"
	TheatreService_DeleteTheaterTypeByID_FullMethodName    = "/moviebooking.TheatreService/DeleteTheaterTypeByID"
	TheatreService_DeleteTheaterTypeByName_FullMethodName  = "/moviebooking.TheatreService/DeleteTheaterTypeByName"
	TheatreService_GetTheaterTypeByID_FullMethodName       = "/moviebooking.TheatreService/GetTheaterTypeByID"
	TheatreService_GetTheaterTypeByName_FullMethodName     = "/moviebooking.TheatreService/GetTheaterTypeByName"
	TheatreService_UpdateTheaterType_FullMethodName        = "/moviebooking.TheatreService/UpdateTheaterType"
	TheatreService_ListTheaterTypes_FullMethodName         = "/moviebooking.TheatreService/ListTheaterTypes"
	TheatreService_AddScreenType_FullMethodName            = "/moviebooking.TheatreService/AddScreenType"
	TheatreService_DeleteScreenTypeByID_FullMethodName     = "/moviebooking.TheatreService/DeleteScreenTypeByID"
	TheatreService_DeleteScreenTypeByName_FullMethodName   = "/moviebooking.TheatreService/DeleteScreenTypeByName"
	TheatreService_GetScreenTypeByID_FullMethodName        = "/moviebooking.TheatreService/GetScreenTypeByID"
	TheatreService_GetScreenTypeByName_FullMethodName      = "/moviebooking.TheatreService/GetScreenTypeByName"
	TheatreService_UpdateScreenType_FullMethodName         = "/moviebooking.TheatreService/UpdateScreenType"
	TheatreService_ListScreenTypes_FullMethodName          = "/moviebooking.TheatreService/ListScreenTypes"
	TheatreService_AddSeatCategory_FullMethodName          = "/moviebooking.TheatreService/AddSeatCategory"
	TheatreService_DeleteSeatCategoryByID_FullMethodName   = "/moviebooking.TheatreService/DeleteSeatCategoryByID"
	TheatreService_DeleteSeatCategoryByName_FullMethodName = "/moviebooking.TheatreService/DeleteSeatCategoryByName"
	TheatreService_GetSeatCategoryByID_FullMethodName      = "/moviebooking.TheatreService/GetSeatCategoryByID"
	TheatreService_GetSeatCategoryByName_FullMethodName    = "/moviebooking.TheatreService/GetSeatCategoryByName"
	TheatreService_UpdateSeatCategory_FullMethodName       = "/moviebooking.TheatreService/UpdateSeatCategory"
	TheatreService_ListSeatCategories_FullMethodName       = "/moviebooking.TheatreService/ListSeatCategories"
	TheatreService_AddTheater_FullMethodName               = "/moviebooking.TheatreService/AddTheater"
	TheatreService_DeleteTheaterByID_FullMethodName        = "/moviebooking.TheatreService/DeleteTheaterByID"
	TheatreService_DeleteTheaterByName_FullMethodName      = "/moviebooking.TheatreService/DeleteTheaterByName"
	TheatreService_GetTheaterByID_FullMethodName           = "/moviebooking.TheatreService/GetTheaterByID"
	TheatreService_GetTheaterByName_FullMethodName         = "/moviebooking.TheatreService/GetTheaterByName"
	TheatreService_UpdateTheater_FullMethodName            = "/moviebooking.TheatreService/UpdateTheater"
	TheatreService_ListTheaters_FullMethodName             = "/moviebooking.TheatreService/ListTheaters"
)

// TheatreServiceClient is the client API for TheatreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Theatre Service definition
type TheatreServiceClient interface {
	// Theater type
	AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error)
	DeleteTheaterTypeByID(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error)
	DeleteTheaterTypeByName(ctx context.Context, in *DeleteTheaterTypeByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeByNameResponse, error)
	GetTheaterTypeByID(ctx context.Context, in *GetTheaterTypeByIDRequest, opts ...grpc.CallOption) (*GetTheaterTypeByIDResponse, error)
	GetTheaterTypeByName(ctx context.Context, in *GetTheaterTypeByNameRequest, opts ...grpc.CallOption) (*GetTheaterTypeBynameResponse, error)
	UpdateTheaterType(ctx context.Context, in *UpdateTheaterTypeRequest, opts ...grpc.CallOption) (*UpdateTheaterTypeResponse, error)
	ListTheaterTypes(ctx context.Context, in *ListTheaterTypesRequest, opts ...grpc.CallOption) (*ListTheaterTypeResponse, error)
	// Screen type
	AddScreenType(ctx context.Context, in *AddScreenTypeRequest, opts ...grpc.CallOption) (*AddScreenTypeResponse, error)
	DeleteScreenTypeByID(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error)
	DeleteScreenTypeByName(ctx context.Context, in *DeleteScreenTypeByNameRequest, opts ...grpc.CallOption) (*DeleteScreenTypeByNameResponse, error)
	GetScreenTypeByID(ctx context.Context, in *GetScreenTypeByIDRequest, opts ...grpc.CallOption) (*GetScreenTypeByIDResponse, error)
	GetScreenTypeByName(ctx context.Context, in *GetScreenTypeByNameRequest, opts ...grpc.CallOption) (*GetScreenTypeByNameResponse, error)
	UpdateScreenType(ctx context.Context, in *UpdateScreenTypeRequest, opts ...grpc.CallOption) (*UpdateScreenTypeResponse, error)
	ListScreenTypes(ctx context.Context, in *ListScreenTypesRequest, opts ...grpc.CallOption) (*ListScreenTypesResponse, error)
	// Seat category
	AddSeatCategory(ctx context.Context, in *AddSeatCategoryRequest, opts ...grpc.CallOption) (*AddSeatCategoryResponse, error)
	DeleteSeatCategoryByID(ctx context.Context, in *DeleteSeatCategoryRequest, opts ...grpc.CallOption) (*DeleteSeatCategoryResponse, error)
	DeleteSeatCategoryByName(ctx context.Context, in *DeleteSeatCategoryByNameRequest, opts ...grpc.CallOption) (*DeleteSeatCategoryByNameResponse, error)
	GetSeatCategoryByID(ctx context.Context, in *GetSeatCategoryByIDRequest, opts ...grpc.CallOption) (*GetSeatCategoryByIDResponse, error)
	GetSeatCategoryByName(ctx context.Context, in *GetSeatCategoryByNameRequest, opts ...grpc.CallOption) (*GetSeatCategoryByNameResponse, error)
	UpdateSeatCategory(ctx context.Context, in *UpdateSeatCategoryRequest, opts ...grpc.CallOption) (*UpdateSeatCategoryResponse, error)
	ListSeatCategories(ctx context.Context, in *ListSeatCategoriesRequest, opts ...grpc.CallOption) (*ListSeatCategoriesResponse, error)
	// Theater
	AddTheater(ctx context.Context, in *AddTheaterRequest, opts ...grpc.CallOption) (*AddTheaterResponse, error)
	DeleteTheaterByID(ctx context.Context, in *DeleteTheaterRequest, opts ...grpc.CallOption) (*DeleteTheaterResponse, error)
	DeleteTheaterByName(ctx context.Context, in *DeleteTheaterByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterByNameResponse, error)
	GetTheaterByID(ctx context.Context, in *GetTheaterByIDRequest, opts ...grpc.CallOption) (*GetTheaterByIDResponse, error)
	GetTheaterByName(ctx context.Context, in *GetTheaterByNameRequest, opts ...grpc.CallOption) (*GetTheaterByNameResponse, error)
	UpdateTheater(ctx context.Context, in *UpdateTheaterRequest, opts ...grpc.CallOption) (*UpdateTheaterResponse, error)
	ListTheaters(ctx context.Context, in *ListTheatersRequest, opts ...grpc.CallOption) (*ListTheatersResponse, error)
}

type theatreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTheatreServiceClient(cc grpc.ClientConnInterface) TheatreServiceClient {
	return &theatreServiceClient{cc}
}

func (c *theatreServiceClient) AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_AddTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheaterTypeByID(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheaterTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheaterTypeByName(ctx context.Context, in *DeleteTheaterTypeByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterTypeByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheaterTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetTheaterTypeByID(ctx context.Context, in *GetTheaterTypeByIDRequest, opts ...grpc.CallOption) (*GetTheaterTypeByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterTypeByIDResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetTheaterTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetTheaterTypeByName(ctx context.Context, in *GetTheaterTypeByNameRequest, opts ...grpc.CallOption) (*GetTheaterTypeBynameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterTypeBynameResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetTheaterTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) UpdateTheaterType(ctx context.Context, in *UpdateTheaterTypeRequest, opts ...grpc.CallOption) (*UpdateTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_UpdateTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) ListTheaterTypes(ctx context.Context, in *ListTheaterTypesRequest, opts ...grpc.CallOption) (*ListTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_ListTheaterTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) AddScreenType(ctx context.Context, in *AddScreenTypeRequest, opts ...grpc.CallOption) (*AddScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScreenTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_AddScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteScreenTypeByID(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteScreenTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteScreenTypeByName(ctx context.Context, in *DeleteScreenTypeByNameRequest, opts ...grpc.CallOption) (*DeleteScreenTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenTypeByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteScreenTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetScreenTypeByID(ctx context.Context, in *GetScreenTypeByIDRequest, opts ...grpc.CallOption) (*GetScreenTypeByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScreenTypeByIDResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetScreenTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetScreenTypeByName(ctx context.Context, in *GetScreenTypeByNameRequest, opts ...grpc.CallOption) (*GetScreenTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScreenTypeByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetScreenTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) UpdateScreenType(ctx context.Context, in *UpdateScreenTypeRequest, opts ...grpc.CallOption) (*UpdateScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScreenTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_UpdateScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) ListScreenTypes(ctx context.Context, in *ListScreenTypesRequest, opts ...grpc.CallOption) (*ListScreenTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScreenTypesResponse)
	err := c.cc.Invoke(ctx, TheatreService_ListScreenTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) AddSeatCategory(ctx context.Context, in *AddSeatCategoryRequest, opts ...grpc.CallOption) (*AddSeatCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddSeatCategoryResponse)
	err := c.cc.Invoke(ctx, TheatreService_AddSeatCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteSeatCategoryByID(ctx context.Context, in *DeleteSeatCategoryRequest, opts ...grpc.CallOption) (*DeleteSeatCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeatCategoryResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteSeatCategoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteSeatCategoryByName(ctx context.Context, in *DeleteSeatCategoryByNameRequest, opts ...grpc.CallOption) (*DeleteSeatCategoryByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSeatCategoryByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteSeatCategoryByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetSeatCategoryByID(ctx context.Context, in *GetSeatCategoryByIDRequest, opts ...grpc.CallOption) (*GetSeatCategoryByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatCategoryByIDResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetSeatCategoryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetSeatCategoryByName(ctx context.Context, in *GetSeatCategoryByNameRequest, opts ...grpc.CallOption) (*GetSeatCategoryByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatCategoryByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetSeatCategoryByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) UpdateSeatCategory(ctx context.Context, in *UpdateSeatCategoryRequest, opts ...grpc.CallOption) (*UpdateSeatCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSeatCategoryResponse)
	err := c.cc.Invoke(ctx, TheatreService_UpdateSeatCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) ListSeatCategories(ctx context.Context, in *ListSeatCategoriesRequest, opts ...grpc.CallOption) (*ListSeatCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSeatCategoriesResponse)
	err := c.cc.Invoke(ctx, TheatreService_ListSeatCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) AddTheater(ctx context.Context, in *AddTheaterRequest, opts ...grpc.CallOption) (*AddTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTheaterResponse)
	err := c.cc.Invoke(ctx, TheatreService_AddTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheaterByID(ctx context.Context, in *DeleteTheaterRequest, opts ...grpc.CallOption) (*DeleteTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheaterByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheaterByName(ctx context.Context, in *DeleteTheaterByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheaterByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetTheaterByID(ctx context.Context, in *GetTheaterByIDRequest, opts ...grpc.CallOption) (*GetTheaterByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterByIDResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetTheaterByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) GetTheaterByName(ctx context.Context, in *GetTheaterByNameRequest, opts ...grpc.CallOption) (*GetTheaterByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterByNameResponse)
	err := c.cc.Invoke(ctx, TheatreService_GetTheaterByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) UpdateTheater(ctx context.Context, in *UpdateTheaterRequest, opts ...grpc.CallOption) (*UpdateTheaterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTheaterResponse)
	err := c.cc.Invoke(ctx, TheatreService_UpdateTheater_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) ListTheaters(ctx context.Context, in *ListTheatersRequest, opts ...grpc.CallOption) (*ListTheatersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTheatersResponse)
	err := c.cc.Invoke(ctx, TheatreService_ListTheaters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheatreServiceServer is the server API for TheatreService service.
// All implementations must embed UnimplementedTheatreServiceServer
// for forward compatibility
//
// Theatre Service definition
type TheatreServiceServer interface {
	// Theater type
	AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error)
	DeleteTheaterTypeByID(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error)
	DeleteTheaterTypeByName(context.Context, *DeleteTheaterTypeByNameRequest) (*DeleteTheaterTypeByNameResponse, error)
	GetTheaterTypeByID(context.Context, *GetTheaterTypeByIDRequest) (*GetTheaterTypeByIDResponse, error)
	GetTheaterTypeByName(context.Context, *GetTheaterTypeByNameRequest) (*GetTheaterTypeBynameResponse, error)
	UpdateTheaterType(context.Context, *UpdateTheaterTypeRequest) (*UpdateTheaterTypeResponse, error)
	ListTheaterTypes(context.Context, *ListTheaterTypesRequest) (*ListTheaterTypeResponse, error)
	// Screen type
	AddScreenType(context.Context, *AddScreenTypeRequest) (*AddScreenTypeResponse, error)
	DeleteScreenTypeByID(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error)
	DeleteScreenTypeByName(context.Context, *DeleteScreenTypeByNameRequest) (*DeleteScreenTypeByNameResponse, error)
	GetScreenTypeByID(context.Context, *GetScreenTypeByIDRequest) (*GetScreenTypeByIDResponse, error)
	GetScreenTypeByName(context.Context, *GetScreenTypeByNameRequest) (*GetScreenTypeByNameResponse, error)
	UpdateScreenType(context.Context, *UpdateScreenTypeRequest) (*UpdateScreenTypeResponse, error)
	ListScreenTypes(context.Context, *ListScreenTypesRequest) (*ListScreenTypesResponse, error)
	// Seat category
	AddSeatCategory(context.Context, *AddSeatCategoryRequest) (*AddSeatCategoryResponse, error)
	DeleteSeatCategoryByID(context.Context, *DeleteSeatCategoryRequest) (*DeleteSeatCategoryResponse, error)
	DeleteSeatCategoryByName(context.Context, *DeleteSeatCategoryByNameRequest) (*DeleteSeatCategoryByNameResponse, error)
	GetSeatCategoryByID(context.Context, *GetSeatCategoryByIDRequest) (*GetSeatCategoryByIDResponse, error)
	GetSeatCategoryByName(context.Context, *GetSeatCategoryByNameRequest) (*GetSeatCategoryByNameResponse, error)
	UpdateSeatCategory(context.Context, *UpdateSeatCategoryRequest) (*UpdateSeatCategoryResponse, error)
	ListSeatCategories(context.Context, *ListSeatCategoriesRequest) (*ListSeatCategoriesResponse, error)
	// Theater
	AddTheater(context.Context, *AddTheaterRequest) (*AddTheaterResponse, error)
	DeleteTheaterByID(context.Context, *DeleteTheaterRequest) (*DeleteTheaterResponse, error)
	DeleteTheaterByName(context.Context, *DeleteTheaterByNameRequest) (*DeleteTheaterByNameResponse, error)
	GetTheaterByID(context.Context, *GetTheaterByIDRequest) (*GetTheaterByIDResponse, error)
	GetTheaterByName(context.Context, *GetTheaterByNameRequest) (*GetTheaterByNameResponse, error)
	UpdateTheater(context.Context, *UpdateTheaterRequest) (*UpdateTheaterResponse, error)
	ListTheaters(context.Context, *ListTheatersRequest) (*ListTheatersResponse, error)
	mustEmbedUnimplementedTheatreServiceServer()
}

// UnimplementedTheatreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTheatreServiceServer struct {
}

func (UnimplementedTheatreServiceServer) AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTheaterType not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheaterTypeByID(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterTypeByID not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheaterTypeByName(context.Context, *DeleteTheaterTypeByNameRequest) (*DeleteTheaterTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterTypeByName not implemented")
}
func (UnimplementedTheatreServiceServer) GetTheaterTypeByID(context.Context, *GetTheaterTypeByIDRequest) (*GetTheaterTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterTypeByID not implemented")
}
func (UnimplementedTheatreServiceServer) GetTheaterTypeByName(context.Context, *GetTheaterTypeByNameRequest) (*GetTheaterTypeBynameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterTypeByName not implemented")
}
func (UnimplementedTheatreServiceServer) UpdateTheaterType(context.Context, *UpdateTheaterTypeRequest) (*UpdateTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheaterType not implemented")
}
func (UnimplementedTheatreServiceServer) ListTheaterTypes(context.Context, *ListTheaterTypesRequest) (*ListTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheaterTypes not implemented")
}
func (UnimplementedTheatreServiceServer) AddScreenType(context.Context, *AddScreenTypeRequest) (*AddScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScreenType not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteScreenTypeByID(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenTypeByID not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteScreenTypeByName(context.Context, *DeleteScreenTypeByNameRequest) (*DeleteScreenTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenTypeByName not implemented")
}
func (UnimplementedTheatreServiceServer) GetScreenTypeByID(context.Context, *GetScreenTypeByIDRequest) (*GetScreenTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenTypeByID not implemented")
}
func (UnimplementedTheatreServiceServer) GetScreenTypeByName(context.Context, *GetScreenTypeByNameRequest) (*GetScreenTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenTypeByName not implemented")
}
func (UnimplementedTheatreServiceServer) UpdateScreenType(context.Context, *UpdateScreenTypeRequest) (*UpdateScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScreenType not implemented")
}
func (UnimplementedTheatreServiceServer) ListScreenTypes(context.Context, *ListScreenTypesRequest) (*ListScreenTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScreenTypes not implemented")
}
func (UnimplementedTheatreServiceServer) AddSeatCategory(context.Context, *AddSeatCategoryRequest) (*AddSeatCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSeatCategory not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteSeatCategoryByID(context.Context, *DeleteSeatCategoryRequest) (*DeleteSeatCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatCategoryByID not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteSeatCategoryByName(context.Context, *DeleteSeatCategoryByNameRequest) (*DeleteSeatCategoryByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeatCategoryByName not implemented")
}
func (UnimplementedTheatreServiceServer) GetSeatCategoryByID(context.Context, *GetSeatCategoryByIDRequest) (*GetSeatCategoryByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatCategoryByID not implemented")
}
func (UnimplementedTheatreServiceServer) GetSeatCategoryByName(context.Context, *GetSeatCategoryByNameRequest) (*GetSeatCategoryByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatCategoryByName not implemented")
}
func (UnimplementedTheatreServiceServer) UpdateSeatCategory(context.Context, *UpdateSeatCategoryRequest) (*UpdateSeatCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeatCategory not implemented")
}
func (UnimplementedTheatreServiceServer) ListSeatCategories(context.Context, *ListSeatCategoriesRequest) (*ListSeatCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSeatCategories not implemented")
}
func (UnimplementedTheatreServiceServer) AddTheater(context.Context, *AddTheaterRequest) (*AddTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTheater not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheaterByID(context.Context, *DeleteTheaterRequest) (*DeleteTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterByID not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheaterByName(context.Context, *DeleteTheaterByNameRequest) (*DeleteTheaterByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterByName not implemented")
}
func (UnimplementedTheatreServiceServer) GetTheaterByID(context.Context, *GetTheaterByIDRequest) (*GetTheaterByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterByID not implemented")
}
func (UnimplementedTheatreServiceServer) GetTheaterByName(context.Context, *GetTheaterByNameRequest) (*GetTheaterByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterByName not implemented")
}
func (UnimplementedTheatreServiceServer) UpdateTheater(context.Context, *UpdateTheaterRequest) (*UpdateTheaterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheater not implemented")
}
func (UnimplementedTheatreServiceServer) ListTheaters(context.Context, *ListTheatersRequest) (*ListTheatersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheaters not implemented")
}
func (UnimplementedTheatreServiceServer) mustEmbedUnimplementedTheatreServiceServer() {}

// UnsafeTheatreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheatreServiceServer will
// result in compilation errors.
type UnsafeTheatreServiceServer interface {
	mustEmbedUnimplementedTheatreServiceServer()
}

func RegisterTheatreServiceServer(s grpc.ServiceRegistrar, srv TheatreServiceServer) {
	s.RegisterService(&TheatreService_ServiceDesc, srv)
}

func _TheatreService_AddTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).AddTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_AddTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).AddTheaterType(ctx, req.(*AddTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheaterTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheaterTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheaterTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheaterTypeByID(ctx, req.(*DeleteTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheaterTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheaterTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheaterTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheaterTypeByName(ctx, req.(*DeleteTheaterTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetTheaterTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetTheaterTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetTheaterTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetTheaterTypeByID(ctx, req.(*GetTheaterTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetTheaterTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetTheaterTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetTheaterTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetTheaterTypeByName(ctx, req.(*GetTheaterTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_UpdateTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).UpdateTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_UpdateTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).UpdateTheaterType(ctx, req.(*UpdateTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_ListTheaterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTheaterTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).ListTheaterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_ListTheaterTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).ListTheaterTypes(ctx, req.(*ListTheaterTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_AddScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).AddScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_AddScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).AddScreenType(ctx, req.(*AddScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteScreenTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteScreenTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteScreenTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteScreenTypeByID(ctx, req.(*DeleteScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteScreenTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteScreenTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteScreenTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteScreenTypeByName(ctx, req.(*DeleteScreenTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetScreenTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetScreenTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetScreenTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetScreenTypeByID(ctx, req.(*GetScreenTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetScreenTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetScreenTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetScreenTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetScreenTypeByName(ctx, req.(*GetScreenTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_UpdateScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).UpdateScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_UpdateScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).UpdateScreenType(ctx, req.(*UpdateScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_ListScreenTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScreenTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).ListScreenTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_ListScreenTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).ListScreenTypes(ctx, req.(*ListScreenTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_AddSeatCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSeatCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).AddSeatCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_AddSeatCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).AddSeatCategory(ctx, req.(*AddSeatCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteSeatCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteSeatCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteSeatCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteSeatCategoryByID(ctx, req.(*DeleteSeatCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteSeatCategoryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSeatCategoryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteSeatCategoryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteSeatCategoryByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteSeatCategoryByName(ctx, req.(*DeleteSeatCategoryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetSeatCategoryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatCategoryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetSeatCategoryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetSeatCategoryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetSeatCategoryByID(ctx, req.(*GetSeatCategoryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetSeatCategoryByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatCategoryByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetSeatCategoryByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetSeatCategoryByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetSeatCategoryByName(ctx, req.(*GetSeatCategoryByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_UpdateSeatCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSeatCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).UpdateSeatCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_UpdateSeatCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).UpdateSeatCategory(ctx, req.(*UpdateSeatCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_ListSeatCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSeatCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).ListSeatCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_ListSeatCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).ListSeatCategories(ctx, req.(*ListSeatCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_AddTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).AddTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_AddTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).AddTheater(ctx, req.(*AddTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheaterByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheaterByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheaterByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheaterByID(ctx, req.(*DeleteTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheaterByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheaterByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheaterByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheaterByName(ctx, req.(*DeleteTheaterByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetTheaterByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetTheaterByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetTheaterByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetTheaterByID(ctx, req.(*GetTheaterByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_GetTheaterByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).GetTheaterByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_GetTheaterByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).GetTheaterByName(ctx, req.(*GetTheaterByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_UpdateTheater_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTheaterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).UpdateTheater(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_UpdateTheater_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).UpdateTheater(ctx, req.(*UpdateTheaterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_ListTheaters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTheatersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).ListTheaters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_ListTheaters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).ListTheaters(ctx, req.(*ListTheatersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TheatreService_ServiceDesc is the grpc.ServiceDesc for TheatreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheatreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebooking.TheatreService",
	HandlerType: (*TheatreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTheaterType",
			Handler:    _TheatreService_AddTheaterType_Handler,
		},
		{
			MethodName: "DeleteTheaterTypeByID",
			Handler:    _TheatreService_DeleteTheaterTypeByID_Handler,
		},
		{
			MethodName: "DeleteTheaterTypeByName",
			Handler:    _TheatreService_DeleteTheaterTypeByName_Handler,
		},
		{
			MethodName: "GetTheaterTypeByID",
			Handler:    _TheatreService_GetTheaterTypeByID_Handler,
		},
		{
			MethodName: "GetTheaterTypeByName",
			Handler:    _TheatreService_GetTheaterTypeByName_Handler,
		},
		{
			MethodName: "UpdateTheaterType",
			Handler:    _TheatreService_UpdateTheaterType_Handler,
		},
		{
			MethodName: "ListTheaterTypes",
			Handler:    _TheatreService_ListTheaterTypes_Handler,
		},
		{
			MethodName: "AddScreenType",
			Handler:    _TheatreService_AddScreenType_Handler,
		},
		{
			MethodName: "DeleteScreenTypeByID",
			Handler:    _TheatreService_DeleteScreenTypeByID_Handler,
		},
		{
			MethodName: "DeleteScreenTypeByName",
			Handler:    _TheatreService_DeleteScreenTypeByName_Handler,
		},
		{
			MethodName: "GetScreenTypeByID",
			Handler:    _TheatreService_GetScreenTypeByID_Handler,
		},
		{
			MethodName: "GetScreenTypeByName",
			Handler:    _TheatreService_GetScreenTypeByName_Handler,
		},
		{
			MethodName: "UpdateScreenType",
			Handler:    _TheatreService_UpdateScreenType_Handler,
		},
		{
			MethodName: "ListScreenTypes",
			Handler:    _TheatreService_ListScreenTypes_Handler,
		},
		{
			MethodName: "AddSeatCategory",
			Handler:    _TheatreService_AddSeatCategory_Handler,
		},
		{
			MethodName: "DeleteSeatCategoryByID",
			Handler:    _TheatreService_DeleteSeatCategoryByID_Handler,
		},
		{
			MethodName: "DeleteSeatCategoryByName",
			Handler:    _TheatreService_DeleteSeatCategoryByName_Handler,
		},
		{
			MethodName: "GetSeatCategoryByID",
			Handler:    _TheatreService_GetSeatCategoryByID_Handler,
		},
		{
			MethodName: "GetSeatCategoryByName",
			Handler:    _TheatreService_GetSeatCategoryByName_Handler,
		},
		{
			MethodName: "UpdateSeatCategory",
			Handler:    _TheatreService_UpdateSeatCategory_Handler,
		},
		{
			MethodName: "ListSeatCategories",
			Handler:    _TheatreService_ListSeatCategories_Handler,
		},
		{
			MethodName: "AddTheater",
			Handler:    _TheatreService_AddTheater_Handler,
		},
		{
			MethodName: "DeleteTheaterByID",
			Handler:    _TheatreService_DeleteTheaterByID_Handler,
		},
		{
			MethodName: "DeleteTheaterByName",
			Handler:    _TheatreService_DeleteTheaterByName_Handler,
		},
		{
			MethodName: "GetTheaterByID",
			Handler:    _TheatreService_GetTheaterByID_Handler,
		},
		{
			MethodName: "GetTheaterByName",
			Handler:    _TheatreService_GetTheaterByName_Handler,
		},
		{
			MethodName: "UpdateTheater",
			Handler:    _TheatreService_UpdateTheater_Handler,
		},
		{
			MethodName: "ListTheaters",
			Handler:    _TheatreService_ListTheaters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_booking/movie_booking.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: movie_booking/movie_booking.proto

package movie_booking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MovieService_RegisterMovie_FullMethodName   = "/moviebooking.MovieService/RegisterMovie"
	MovieService_UpdateMovie_FullMethodName     = "/moviebooking.MovieService/UpdateMovie"
	MovieService_ListMovies_FullMethodName      = "/moviebooking.MovieService/ListMovies"
	MovieService_GetMovieDetails_FullMethodName = "/moviebooking.MovieService/GetMovieDetails"
	MovieService_DeleteMovie_FullMethodName     = "/moviebooking.MovieService/DeleteMovie"
)

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Movie Service definition
type MovieServiceClient interface {
	RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error)
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_RegisterMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, MovieService_ListMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieDetailsResponse)
	err := c.cc.Invoke(ctx, MovieService_GetMovieDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, MovieService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
//
// Movie Service definition
type MovieServiceServer interface {
	RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error)
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieDetails not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_RegisterMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).RegisterMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_RegisterMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).RegisterMovie(ctx, req.(*RegisterMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovieDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovieDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_GetMovieDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovieDetails(ctx, req.(*GetMovieDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebooking.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMovie",
			Handler:    _MovieService_RegisterMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _MovieService_ListMovies_Handler,
		},
		{
			MethodName: "GetMovieDetails",
			Handler:    _MovieService_GetMovieDetails_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_booking/movie_booking.proto",
}

const (
	TheatreService_AddTheaterType_FullMethodName    = "/moviebooking.TheatreService/AddTheaterType"
	TheatreService_DeleteTheaterType_FullMethodName = "/moviebooking.TheatreService/DeleteTheaterType"
	TheatreService_RegisterTheatre_FullMethodName   = "/moviebooking.TheatreService/RegisterTheatre"
	TheatreService_UpdateTheatre_FullMethodName     = "/moviebooking.TheatreService/UpdateTheatre"
	TheatreService_DeleteTheatre_FullMethodName     = "/moviebooking.TheatreService/DeleteTheatre"
)

// TheatreServiceClient is the client API for TheatreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Theatre Service definition
type TheatreServiceClient interface {
	// Theater type
	AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error)
	DeleteTheaterType(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error)
	// Theater
	RegisterTheatre(ctx context.Context, in *RegisterTheatreRequest, opts ...grpc.CallOption) (*RegisterTheatreResponse, error)
	UpdateTheatre(ctx context.Context, in *UpdateTheatreRequest, opts ...grpc.CallOption) (*UpdateTheatreResponse, error)
	DeleteTheatre(ctx context.Context, in *DeleteTheatreRequest, opts ...grpc.CallOption) (*DeleteTheatreResponse, error)
}

type theatreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTheatreServiceClient(cc grpc.ClientConnInterface) TheatreServiceClient {
	return &theatreServiceClient{cc}
}

func (c *theatreServiceClient) AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_AddTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheaterType(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterTypeResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) RegisterTheatre(ctx context.Context, in *RegisterTheatreRequest, opts ...grpc.CallOption) (*RegisterTheatreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterTheatreResponse)
	err := c.cc.Invoke(ctx, TheatreService_RegisterTheatre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) UpdateTheatre(ctx context.Context, in *UpdateTheatreRequest, opts ...grpc.CallOption) (*UpdateTheatreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTheatreResponse)
	err := c.cc.Invoke(ctx, TheatreService_UpdateTheatre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *theatreServiceClient) DeleteTheatre(ctx context.Context, in *DeleteTheatreRequest, opts ...grpc.CallOption) (*DeleteTheatreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheatreResponse)
	err := c.cc.Invoke(ctx, TheatreService_DeleteTheatre_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TheatreServiceServer is the server API for TheatreService service.
// All implementations must embed UnimplementedTheatreServiceServer
// for forward compatibility
//
// Theatre Service definition
type TheatreServiceServer interface {
	// Theater type
	AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error)
	DeleteTheaterType(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error)
	// Theater
	RegisterTheatre(context.Context, *RegisterTheatreRequest) (*RegisterTheatreResponse, error)
	UpdateTheatre(context.Context, *UpdateTheatreRequest) (*UpdateTheatreResponse, error)
	DeleteTheatre(context.Context, *DeleteTheatreRequest) (*DeleteTheatreResponse, error)
	mustEmbedUnimplementedTheatreServiceServer()
}

// UnimplementedTheatreServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTheatreServiceServer struct {
}

func (UnimplementedTheatreServiceServer) AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTheaterType not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheaterType(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterType not implemented")
}
func (UnimplementedTheatreServiceServer) RegisterTheatre(context.Context, *RegisterTheatreRequest) (*RegisterTheatreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTheatre not implemented")
}
func (UnimplementedTheatreServiceServer) UpdateTheatre(context.Context, *UpdateTheatreRequest) (*UpdateTheatreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheatre not implemented")
}
func (UnimplementedTheatreServiceServer) DeleteTheatre(context.Context, *DeleteTheatreRequest) (*DeleteTheatreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheatre not implemented")
}
func (UnimplementedTheatreServiceServer) mustEmbedUnimplementedTheatreServiceServer() {}

// UnsafeTheatreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TheatreServiceServer will
// result in compilation errors.
type UnsafeTheatreServiceServer interface {
	mustEmbedUnimplementedTheatreServiceServer()
}

func RegisterTheatreServiceServer(s grpc.ServiceRegistrar, srv TheatreServiceServer) {
	s.RegisterService(&TheatreService_ServiceDesc, srv)
}

func _TheatreService_AddTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).AddTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_AddTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).AddTheaterType(ctx, req.(*AddTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheaterType(ctx, req.(*DeleteTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_RegisterTheatre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTheatreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).RegisterTheatre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_RegisterTheatre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).RegisterTheatre(ctx, req.(*RegisterTheatreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_UpdateTheatre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTheatreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).UpdateTheatre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_UpdateTheatre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).UpdateTheatre(ctx, req.(*UpdateTheatreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TheatreService_DeleteTheatre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheatreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TheatreServiceServer).DeleteTheatre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TheatreService_DeleteTheatre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TheatreServiceServer).DeleteTheatre(ctx, req.(*DeleteTheatreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TheatreService_ServiceDesc is the grpc.ServiceDesc for TheatreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TheatreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moviebooking.TheatreService",
	HandlerType: (*TheatreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTheaterType",
			Handler:    _TheatreService_AddTheaterType_Handler,
		},
		{
			MethodName: "DeleteTheaterType",
			Handler:    _TheatreService_DeleteTheaterType_Handler,
		},
		{
			MethodName: "RegisterTheatre",
			Handler:    _TheatreService_RegisterTheatre_Handler,
		},
		{
			MethodName: "UpdateTheatre",
			Handler:    _TheatreService_UpdateTheatre_Handler,
		},
		{
			MethodName: "DeleteTheatre",
			Handler:    _TheatreService_DeleteTheatre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie_booking/movie_booking.proto",
}

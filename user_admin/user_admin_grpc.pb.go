// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: user_admin/user_admin.proto

package user_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	UserService_RegisterUser_FullMethodName      = "/useradmin.UserService/RegisterUser"
	UserService_ValidateUser_FullMethodName      = "/useradmin.UserService/ValidateUser"
	UserService_LoginUser_FullMethodName         = "/useradmin.UserService/LoginUser"
	UserService_GetUserProfile_FullMethodName    = "/useradmin.UserService/GetUserProfile"
	UserService_UpdateUserProfile_FullMethodName = "/useradmin.UserService/UpdateUserProfile"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User Service definition
type UserServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	GetUserProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, UserService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateUser(ctx context.Context, in *ValidateUserRequest, opts ...grpc.CallOption) (*ValidateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ValidateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, UserService_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, UserService_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UpdateUserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
//
// User Service definition
type UserServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	GetUserProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServiceServer) ValidateUser(context.Context, *ValidateUserRequest) (*ValidateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateUser not implemented")
}
func (UnimplementedUserServiceServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ValidateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateUser(ctx, req.(*ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useradmin.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserService_RegisterUser_Handler,
		},
		{
			MethodName: "ValidateUser",
			Handler:    _UserService_ValidateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UserService_LoginUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _UserService_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserService_UpdateUserProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_admin/user_admin.proto",
}

const (
	AdminService_RegisterAdmin_FullMethodName      = "/useradmin.AdminService/RegisterAdmin"
	AdminService_LoginAdmin_FullMethodName         = "/useradmin.AdminService/LoginAdmin"
	AdminService_UpdateAdminProfile_FullMethodName = "/useradmin.AdminService/UpdateAdminProfile"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Admin Service definition
type AdminServiceClient interface {
	RegisterAdmin(ctx context.Context, in *RegisterAdminRequest, opts ...grpc.CallOption) (*RegisterAdminResponse, error)
	LoginAdmin(ctx context.Context, in *LoginAdminRequest, opts ...grpc.CallOption) (*LoginAdminResponse, error)
	UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*UpdateAdminProfileResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) RegisterAdmin(ctx context.Context, in *RegisterAdminRequest, opts ...grpc.CallOption) (*RegisterAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterAdminResponse)
	err := c.cc.Invoke(ctx, AdminService_RegisterAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) LoginAdmin(ctx context.Context, in *LoginAdminRequest, opts ...grpc.CallOption) (*LoginAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginAdminResponse)
	err := c.cc.Invoke(ctx, AdminService_LoginAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateAdminProfile(ctx context.Context, in *UpdateAdminProfileRequest, opts ...grpc.CallOption) (*UpdateAdminProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAdminProfileResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateAdminProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
//
// Admin Service definition
type AdminServiceServer interface {
	RegisterAdmin(context.Context, *RegisterAdminRequest) (*RegisterAdminResponse, error)
	LoginAdmin(context.Context, *LoginAdminRequest) (*LoginAdminResponse, error)
	UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*UpdateAdminProfileResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) RegisterAdmin(context.Context, *RegisterAdminRequest) (*RegisterAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAdmin not implemented")
}
func (UnimplementedAdminServiceServer) LoginAdmin(context.Context, *LoginAdminRequest) (*LoginAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedAdminServiceServer) UpdateAdminProfile(context.Context, *UpdateAdminProfileRequest) (*UpdateAdminProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdminProfile not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_RegisterAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RegisterAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RegisterAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RegisterAdmin(ctx, req.(*RegisterAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_LoginAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).LoginAdmin(ctx, req.(*LoginAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateAdminProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdminProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateAdminProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateAdminProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateAdminProfile(ctx, req.(*UpdateAdminProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useradmin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAdmin",
			Handler:    _AdminService_RegisterAdmin_Handler,
		},
		{
			MethodName: "LoginAdmin",
			Handler:    _AdminService_LoginAdmin_Handler,
		},
		{
			MethodName: "UpdateAdminProfile",
			Handler:    _AdminService_UpdateAdminProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_admin/user_admin.proto",
}

const (
	SuperAdminService_LoginSuperAdmin_FullMethodName         = "/useradmin.SuperAdminService/LoginSuperAdmin"
	SuperAdminService_ListAdminRequests_FullMethodName       = "/useradmin.SuperAdminService/ListAdminRequests"
	SuperAdminService_AdminApproval_FullMethodName           = "/useradmin.SuperAdminService/AdminApproval"
	SuperAdminService_RegisterMovie_FullMethodName           = "/useradmin.SuperAdminService/RegisterMovie"
	SuperAdminService_UpdateMovie_FullMethodName             = "/useradmin.SuperAdminService/UpdateMovie"
	SuperAdminService_ListMovies_FullMethodName              = "/useradmin.SuperAdminService/ListMovies"
	SuperAdminService_GetMovieDetails_FullMethodName         = "/useradmin.SuperAdminService/GetMovieDetails"
	SuperAdminService_DeleteMovie_FullMethodName             = "/useradmin.SuperAdminService/DeleteMovie"
	SuperAdminService_AddTheaterType_FullMethodName          = "/useradmin.SuperAdminService/AddTheaterType"
	SuperAdminService_DeleteTheaterTypeByID_FullMethodName   = "/useradmin.SuperAdminService/DeleteTheaterTypeByID"
	SuperAdminService_DeleteTheaterTypeByName_FullMethodName = "/useradmin.SuperAdminService/DeleteTheaterTypeByName"
	SuperAdminService_GetTheaterTypeByID_FullMethodName      = "/useradmin.SuperAdminService/GetTheaterTypeByID"
	SuperAdminService_GetTheaterTypeByName_FullMethodName    = "/useradmin.SuperAdminService/GetTheaterTypeByName"
	SuperAdminService_UpdateTheaterType_FullMethodName       = "/useradmin.SuperAdminService/UpdateTheaterType"
	SuperAdminService_ListTheaterTypes_FullMethodName        = "/useradmin.SuperAdminService/ListTheaterTypes"
	SuperAdminService_AddScreenType_FullMethodName           = "/useradmin.SuperAdminService/AddScreenType"
	SuperAdminService_DeleteScreenTypeByID_FullMethodName    = "/useradmin.SuperAdminService/DeleteScreenTypeByID"
	SuperAdminService_DeleteScreenTypeByName_FullMethodName  = "/useradmin.SuperAdminService/DeleteScreenTypeByName"
	SuperAdminService_GetScreenTypeByID_FullMethodName       = "/useradmin.SuperAdminService/GetScreenTypeByID"
	SuperAdminService_GetScreenTypeByName_FullMethodName     = "/useradmin.SuperAdminService/GetScreenTypeByName"
	SuperAdminService_UpdateScreenType_FullMethodName        = "/useradmin.SuperAdminService/UpdateScreenType"
	SuperAdminService_ListScreenTypes_FullMethodName         = "/useradmin.SuperAdminService/ListScreenTypes"
)

// SuperAdminServiceClient is the client API for SuperAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Super - Admin service definition
type SuperAdminServiceClient interface {
	// Admin
	LoginSuperAdmin(ctx context.Context, in *LoginSuperAdminRequest, opts ...grpc.CallOption) (*LoginSuperAdminResponse, error)
	ListAdminRequests(ctx context.Context, in *ListAdminRequestsRequest, opts ...grpc.CallOption) (*ListAdminRequestsResponse, error)
	AdminApproval(ctx context.Context, in *AdminApprovalRequest, opts ...grpc.CallOption) (*AdminApprovalResponse, error)
	// Movies
	RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error)
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
	// Theater type
	AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error)
	DeleteTheaterTypeByID(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error)
	DeleteTheaterTypeByName(ctx context.Context, in *DeleteTheaterTypeByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeByNameResponse, error)
	GetTheaterTypeByID(ctx context.Context, in *GetTheaterTypeByIDRequest, opts ...grpc.CallOption) (*GetTheaterTypeByIDResponse, error)
	GetTheaterTypeByName(ctx context.Context, in *GetTheaterTypeByNameRequest, opts ...grpc.CallOption) (*GetTheaterTypeBynameResponse, error)
	UpdateTheaterType(ctx context.Context, in *UpdateTheaterTypeRequest, opts ...grpc.CallOption) (*UpdateTheaterTypeResponse, error)
	ListTheaterTypes(ctx context.Context, in *ListTheaterTypesRequest, opts ...grpc.CallOption) (*ListTheaterTypeResponse, error)
	// Screen type
	AddScreenType(ctx context.Context, in *AddScreenTypeRequest, opts ...grpc.CallOption) (*AddScreenTypeResponse, error)
	DeleteScreenTypeByID(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error)
	DeleteScreenTypeByName(ctx context.Context, in *DeleteScreenTypeByNameRequest, opts ...grpc.CallOption) (*DeleteScreenTypeByNameResponse, error)
	GetScreenTypeByID(ctx context.Context, in *GetScreenTypeByIDRequest, opts ...grpc.CallOption) (*GetScreenTypeByIDResponse, error)
	GetScreenTypeByName(ctx context.Context, in *GetScreenTypeByNameRequest, opts ...grpc.CallOption) (*GetScreenTypeByNameResponse, error)
	UpdateScreenType(ctx context.Context, in *UpdateScreenTypeRequest, opts ...grpc.CallOption) (*UpdateScreenTypeResponse, error)
	ListScreenTypes(ctx context.Context, in *ListScreenTypesRequest, opts ...grpc.CallOption) (*ListScreenTypesResponse, error)
}

type superAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperAdminServiceClient(cc grpc.ClientConnInterface) SuperAdminServiceClient {
	return &superAdminServiceClient{cc}
}

func (c *superAdminServiceClient) LoginSuperAdmin(ctx context.Context, in *LoginSuperAdminRequest, opts ...grpc.CallOption) (*LoginSuperAdminResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginSuperAdminResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_LoginSuperAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) ListAdminRequests(ctx context.Context, in *ListAdminRequestsRequest, opts ...grpc.CallOption) (*ListAdminRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAdminRequestsResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_ListAdminRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) AdminApproval(ctx context.Context, in *AdminApprovalRequest, opts ...grpc.CallOption) (*AdminApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminApprovalResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_AdminApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) RegisterMovie(ctx context.Context, in *RegisterMovieRequest, opts ...grpc.CallOption) (*RegisterMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterMovieResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_RegisterMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMovieResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_ListMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieDetailsResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_GetMovieDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) AddTheaterType(ctx context.Context, in *AddTheaterTypeRequest, opts ...grpc.CallOption) (*AddTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTheaterTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_AddTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) DeleteTheaterTypeByID(ctx context.Context, in *DeleteTheaterTypeRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_DeleteTheaterTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) DeleteTheaterTypeByName(ctx context.Context, in *DeleteTheaterTypeByNameRequest, opts ...grpc.CallOption) (*DeleteTheaterTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTheaterTypeByNameResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_DeleteTheaterTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) GetTheaterTypeByID(ctx context.Context, in *GetTheaterTypeByIDRequest, opts ...grpc.CallOption) (*GetTheaterTypeByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterTypeByIDResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_GetTheaterTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) GetTheaterTypeByName(ctx context.Context, in *GetTheaterTypeByNameRequest, opts ...grpc.CallOption) (*GetTheaterTypeBynameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTheaterTypeBynameResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_GetTheaterTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) UpdateTheaterType(ctx context.Context, in *UpdateTheaterTypeRequest, opts ...grpc.CallOption) (*UpdateTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTheaterTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_UpdateTheaterType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) ListTheaterTypes(ctx context.Context, in *ListTheaterTypesRequest, opts ...grpc.CallOption) (*ListTheaterTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTheaterTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_ListTheaterTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) AddScreenType(ctx context.Context, in *AddScreenTypeRequest, opts ...grpc.CallOption) (*AddScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddScreenTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_AddScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) DeleteScreenTypeByID(ctx context.Context, in *DeleteScreenTypeRequest, opts ...grpc.CallOption) (*DeleteScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_DeleteScreenTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) DeleteScreenTypeByName(ctx context.Context, in *DeleteScreenTypeByNameRequest, opts ...grpc.CallOption) (*DeleteScreenTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteScreenTypeByNameResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_DeleteScreenTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) GetScreenTypeByID(ctx context.Context, in *GetScreenTypeByIDRequest, opts ...grpc.CallOption) (*GetScreenTypeByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScreenTypeByIDResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_GetScreenTypeByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) GetScreenTypeByName(ctx context.Context, in *GetScreenTypeByNameRequest, opts ...grpc.CallOption) (*GetScreenTypeByNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScreenTypeByNameResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_GetScreenTypeByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) UpdateScreenType(ctx context.Context, in *UpdateScreenTypeRequest, opts ...grpc.CallOption) (*UpdateScreenTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateScreenTypeResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_UpdateScreenType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superAdminServiceClient) ListScreenTypes(ctx context.Context, in *ListScreenTypesRequest, opts ...grpc.CallOption) (*ListScreenTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListScreenTypesResponse)
	err := c.cc.Invoke(ctx, SuperAdminService_ListScreenTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperAdminServiceServer is the server API for SuperAdminService service.
// All implementations must embed UnimplementedSuperAdminServiceServer
// for forward compatibility
//
// Super - Admin service definition
type SuperAdminServiceServer interface {
	// Admin
	LoginSuperAdmin(context.Context, *LoginSuperAdminRequest) (*LoginSuperAdminResponse, error)
	ListAdminRequests(context.Context, *ListAdminRequestsRequest) (*ListAdminRequestsResponse, error)
	AdminApproval(context.Context, *AdminApprovalRequest) (*AdminApprovalResponse, error)
	// Movies
	RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error)
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	// Theater type
	AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error)
	DeleteTheaterTypeByID(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error)
	DeleteTheaterTypeByName(context.Context, *DeleteTheaterTypeByNameRequest) (*DeleteTheaterTypeByNameResponse, error)
	GetTheaterTypeByID(context.Context, *GetTheaterTypeByIDRequest) (*GetTheaterTypeByIDResponse, error)
	GetTheaterTypeByName(context.Context, *GetTheaterTypeByNameRequest) (*GetTheaterTypeBynameResponse, error)
	UpdateTheaterType(context.Context, *UpdateTheaterTypeRequest) (*UpdateTheaterTypeResponse, error)
	ListTheaterTypes(context.Context, *ListTheaterTypesRequest) (*ListTheaterTypeResponse, error)
	// Screen type
	AddScreenType(context.Context, *AddScreenTypeRequest) (*AddScreenTypeResponse, error)
	DeleteScreenTypeByID(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error)
	DeleteScreenTypeByName(context.Context, *DeleteScreenTypeByNameRequest) (*DeleteScreenTypeByNameResponse, error)
	GetScreenTypeByID(context.Context, *GetScreenTypeByIDRequest) (*GetScreenTypeByIDResponse, error)
	GetScreenTypeByName(context.Context, *GetScreenTypeByNameRequest) (*GetScreenTypeByNameResponse, error)
	UpdateScreenType(context.Context, *UpdateScreenTypeRequest) (*UpdateScreenTypeResponse, error)
	ListScreenTypes(context.Context, *ListScreenTypesRequest) (*ListScreenTypesResponse, error)
	mustEmbedUnimplementedSuperAdminServiceServer()
}

// UnimplementedSuperAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSuperAdminServiceServer struct {
}

func (UnimplementedSuperAdminServiceServer) LoginSuperAdmin(context.Context, *LoginSuperAdminRequest) (*LoginSuperAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginSuperAdmin not implemented")
}
func (UnimplementedSuperAdminServiceServer) ListAdminRequests(context.Context, *ListAdminRequestsRequest) (*ListAdminRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAdminRequests not implemented")
}
func (UnimplementedSuperAdminServiceServer) AdminApproval(context.Context, *AdminApprovalRequest) (*AdminApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminApproval not implemented")
}
func (UnimplementedSuperAdminServiceServer) RegisterMovie(context.Context, *RegisterMovieRequest) (*RegisterMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMovie not implemented")
}
func (UnimplementedSuperAdminServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedSuperAdminServiceServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedSuperAdminServiceServer) GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieDetails not implemented")
}
func (UnimplementedSuperAdminServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedSuperAdminServiceServer) AddTheaterType(context.Context, *AddTheaterTypeRequest) (*AddTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTheaterType not implemented")
}
func (UnimplementedSuperAdminServiceServer) DeleteTheaterTypeByID(context.Context, *DeleteTheaterTypeRequest) (*DeleteTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterTypeByID not implemented")
}
func (UnimplementedSuperAdminServiceServer) DeleteTheaterTypeByName(context.Context, *DeleteTheaterTypeByNameRequest) (*DeleteTheaterTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTheaterTypeByName not implemented")
}
func (UnimplementedSuperAdminServiceServer) GetTheaterTypeByID(context.Context, *GetTheaterTypeByIDRequest) (*GetTheaterTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterTypeByID not implemented")
}
func (UnimplementedSuperAdminServiceServer) GetTheaterTypeByName(context.Context, *GetTheaterTypeByNameRequest) (*GetTheaterTypeBynameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheaterTypeByName not implemented")
}
func (UnimplementedSuperAdminServiceServer) UpdateTheaterType(context.Context, *UpdateTheaterTypeRequest) (*UpdateTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTheaterType not implemented")
}
func (UnimplementedSuperAdminServiceServer) ListTheaterTypes(context.Context, *ListTheaterTypesRequest) (*ListTheaterTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTheaterTypes not implemented")
}
func (UnimplementedSuperAdminServiceServer) AddScreenType(context.Context, *AddScreenTypeRequest) (*AddScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddScreenType not implemented")
}
func (UnimplementedSuperAdminServiceServer) DeleteScreenTypeByID(context.Context, *DeleteScreenTypeRequest) (*DeleteScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenTypeByID not implemented")
}
func (UnimplementedSuperAdminServiceServer) DeleteScreenTypeByName(context.Context, *DeleteScreenTypeByNameRequest) (*DeleteScreenTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScreenTypeByName not implemented")
}
func (UnimplementedSuperAdminServiceServer) GetScreenTypeByID(context.Context, *GetScreenTypeByIDRequest) (*GetScreenTypeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenTypeByID not implemented")
}
func (UnimplementedSuperAdminServiceServer) GetScreenTypeByName(context.Context, *GetScreenTypeByNameRequest) (*GetScreenTypeByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreenTypeByName not implemented")
}
func (UnimplementedSuperAdminServiceServer) UpdateScreenType(context.Context, *UpdateScreenTypeRequest) (*UpdateScreenTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScreenType not implemented")
}
func (UnimplementedSuperAdminServiceServer) ListScreenTypes(context.Context, *ListScreenTypesRequest) (*ListScreenTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScreenTypes not implemented")
}
func (UnimplementedSuperAdminServiceServer) mustEmbedUnimplementedSuperAdminServiceServer() {}

// UnsafeSuperAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperAdminServiceServer will
// result in compilation errors.
type UnsafeSuperAdminServiceServer interface {
	mustEmbedUnimplementedSuperAdminServiceServer()
}

func RegisterSuperAdminServiceServer(s grpc.ServiceRegistrar, srv SuperAdminServiceServer) {
	s.RegisterService(&SuperAdminService_ServiceDesc, srv)
}

func _SuperAdminService_LoginSuperAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginSuperAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).LoginSuperAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_LoginSuperAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).LoginSuperAdmin(ctx, req.(*LoginSuperAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_ListAdminRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAdminRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).ListAdminRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_ListAdminRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).ListAdminRequests(ctx, req.(*ListAdminRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_AdminApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).AdminApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_AdminApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).AdminApproval(ctx, req.(*AdminApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_RegisterMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).RegisterMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_RegisterMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).RegisterMovie(ctx, req.(*RegisterMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_GetMovieDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).GetMovieDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_GetMovieDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).GetMovieDetails(ctx, req.(*GetMovieDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_AddTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).AddTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_AddTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).AddTheaterType(ctx, req.(*AddTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_DeleteTheaterTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).DeleteTheaterTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_DeleteTheaterTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).DeleteTheaterTypeByID(ctx, req.(*DeleteTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_DeleteTheaterTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTheaterTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).DeleteTheaterTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_DeleteTheaterTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).DeleteTheaterTypeByName(ctx, req.(*DeleteTheaterTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_GetTheaterTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).GetTheaterTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_GetTheaterTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).GetTheaterTypeByID(ctx, req.(*GetTheaterTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_GetTheaterTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTheaterTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).GetTheaterTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_GetTheaterTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).GetTheaterTypeByName(ctx, req.(*GetTheaterTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_UpdateTheaterType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTheaterTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).UpdateTheaterType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_UpdateTheaterType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).UpdateTheaterType(ctx, req.(*UpdateTheaterTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_ListTheaterTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTheaterTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).ListTheaterTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_ListTheaterTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).ListTheaterTypes(ctx, req.(*ListTheaterTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_AddScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).AddScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_AddScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).AddScreenType(ctx, req.(*AddScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_DeleteScreenTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).DeleteScreenTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_DeleteScreenTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).DeleteScreenTypeByID(ctx, req.(*DeleteScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_DeleteScreenTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScreenTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).DeleteScreenTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_DeleteScreenTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).DeleteScreenTypeByName(ctx, req.(*DeleteScreenTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_GetScreenTypeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenTypeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).GetScreenTypeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_GetScreenTypeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).GetScreenTypeByID(ctx, req.(*GetScreenTypeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_GetScreenTypeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreenTypeByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).GetScreenTypeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_GetScreenTypeByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).GetScreenTypeByName(ctx, req.(*GetScreenTypeByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_UpdateScreenType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScreenTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).UpdateScreenType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_UpdateScreenType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).UpdateScreenType(ctx, req.(*UpdateScreenTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperAdminService_ListScreenTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScreenTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperAdminServiceServer).ListScreenTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperAdminService_ListScreenTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperAdminServiceServer).ListScreenTypes(ctx, req.(*ListScreenTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperAdminService_ServiceDesc is the grpc.ServiceDesc for SuperAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "useradmin.SuperAdminService",
	HandlerType: (*SuperAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginSuperAdmin",
			Handler:    _SuperAdminService_LoginSuperAdmin_Handler,
		},
		{
			MethodName: "ListAdminRequests",
			Handler:    _SuperAdminService_ListAdminRequests_Handler,
		},
		{
			MethodName: "AdminApproval",
			Handler:    _SuperAdminService_AdminApproval_Handler,
		},
		{
			MethodName: "RegisterMovie",
			Handler:    _SuperAdminService_RegisterMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _SuperAdminService_UpdateMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _SuperAdminService_ListMovies_Handler,
		},
		{
			MethodName: "GetMovieDetails",
			Handler:    _SuperAdminService_GetMovieDetails_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _SuperAdminService_DeleteMovie_Handler,
		},
		{
			MethodName: "AddTheaterType",
			Handler:    _SuperAdminService_AddTheaterType_Handler,
		},
		{
			MethodName: "DeleteTheaterTypeByID",
			Handler:    _SuperAdminService_DeleteTheaterTypeByID_Handler,
		},
		{
			MethodName: "DeleteTheaterTypeByName",
			Handler:    _SuperAdminService_DeleteTheaterTypeByName_Handler,
		},
		{
			MethodName: "GetTheaterTypeByID",
			Handler:    _SuperAdminService_GetTheaterTypeByID_Handler,
		},
		{
			MethodName: "GetTheaterTypeByName",
			Handler:    _SuperAdminService_GetTheaterTypeByName_Handler,
		},
		{
			MethodName: "UpdateTheaterType",
			Handler:    _SuperAdminService_UpdateTheaterType_Handler,
		},
		{
			MethodName: "ListTheaterTypes",
			Handler:    _SuperAdminService_ListTheaterTypes_Handler,
		},
		{
			MethodName: "AddScreenType",
			Handler:    _SuperAdminService_AddScreenType_Handler,
		},
		{
			MethodName: "DeleteScreenTypeByID",
			Handler:    _SuperAdminService_DeleteScreenTypeByID_Handler,
		},
		{
			MethodName: "DeleteScreenTypeByName",
			Handler:    _SuperAdminService_DeleteScreenTypeByName_Handler,
		},
		{
			MethodName: "GetScreenTypeByID",
			Handler:    _SuperAdminService_GetScreenTypeByID_Handler,
		},
		{
			MethodName: "GetScreenTypeByName",
			Handler:    _SuperAdminService_GetScreenTypeByName_Handler,
		},
		{
			MethodName: "UpdateScreenType",
			Handler:    _SuperAdminService_UpdateScreenType_Handler,
		},
		{
			MethodName: "ListScreenTypes",
			Handler:    _SuperAdminService_ListScreenTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_admin/user_admin.proto",
}

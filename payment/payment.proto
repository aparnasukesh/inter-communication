syntax = "proto3";

package payment;

option go_package = "./payment";

service PaymentService {
    rpc ProcessPayment(ProcessPaymentRequest) returns (ProcessPaymentResponse);
    rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusResponse);
    rpc HandleRazorpayWebhook(HandleRazorpayWebhookRequest) returns (HandleRazorpayWebhookResponse);
}

message Transaction {
    int32 transaction_id = 1; // Changed to snake_case for consistency
    int32 booking_id = 2;      
    int32 user_id = 3;      
    int32 payment_method_id = 4; 
    string transaction_date = 5; 
    double amount = 6;    
    string order_id = 7;
    string status = 8;  
}

message ProcessPaymentRequest {
    int32 booking_id = 1; 
    int32 user_id = 2; 
    double amount = 3; 
    int32 payment_method_id = 4; 
}

message ProcessPaymentResponse {
    Transaction transaction = 1;
}

message GetTransactionStatusRequest {
    int32 transaction_id = 1; 
}

message GetTransactionStatusResponse {
    int32 transaction_id = 1;
    string status = 2; 
    double amount = 3; 
    int32 payment_method_id = 4; // Updated to match the field naming convention
    string transaction_date = 5; 
}

// New message for handling Razorpay webhook events
message HandleRazorpayWebhookRequest {
    string event = 1; // The type of event (e.g., payment.captured)
    RazorpayPayload payload = 2; // Payload containing the transaction details
}

message RazorpayPayload {
    PaymentEntity payment = 1; // Details of the payment entity
}

message PaymentEntity {
    string id = 1; // Payment ID
    double amount = 2; // Amount
    string currency = 3; // Currency (e.g., "INR")
    string status = 4; // Payment status
    string order_id = 5; // Related order ID
    bool international = 6; // Indicates if the payment is international
    string method = 7; // Payment method (e.g., "card")
    int64 created_at = 8; // Timestamp of when the payment was created
    string customer_id = 9; // Customer ID
    string description = 10; // Payment description
    double fee = 11; // Transaction fee
    double tax = 12; // Tax amount
}

// Response for handling Razorpay webhook
message HandleRazorpayWebhookResponse {
    string message = 1; // Response message
    string status = 2;  // Status of the processing (e.g., success, error)
}
